from __future__ import annotations

from typing import Dict, List

from moped.databases.cyc import ParseCompound, ParseReaction, Repairer

COMPARTMENT_MAP = {
    "CYTOSOL": "CYTOSOL",
    "IN": "CYTOSOL",
    "UNKNOWN-SPACE": "CYTOSOL",
    "SIDE-1": "CYTOSOL",
    "SIDE-2": "PERIPLASM",
    "EXTRACELLULAR": "EXTRACELLULAR",
    "CHL-THY-MEM": "PERIPLASM",
    "CHLOR-STR": "PERIPLASM",
    "CHROM-STR": "PERIPLASM",
    "GOLGI-LUM": "CYTOSOL",
    "LYS-LUM": "CYTOSOL",
    "MIT-IM-SPC": "PERIPLASM",
    "MIT-IMEM": "PERIPLASM",
    "MIT-LUM": "CYTOSOL",
    "OUTER-MEM": "PERIPLASM",
    "PERI-BAC": "PERIPLASM",
    "PERI-BAC-GN": "PERIPLASM",
    "PERIPLASM": "PERIPLASM",
    "PEROX-LUM": "CYTOSOL",
    "PLASMA-MEM": "PERIPLASM",
    "PLAST-IMEM": "PERIPLASM",
    "PLASTID-STR": "PERIPLASM",
    "PM-ANIMAL": "PERIPLASM",
    "PM-BAC-ACT": "PERIPLASM",
    "PM-BAC-NEG": "PERIPLASM",
    "PM-BAC-POS": "PERIPLASM",
    "RGH-ER-LUM": "CYTOSOL",
    "RGH-ER-MEM": "PERIPLASM",
    "THY-LUM-CYA": "CYTOSOL",
    "VAC-LUM": "CYTOSOL",
    "VAC-MEM": "PERIPLASM",
    "VESICLE": "PERIPLASM",
    "OUT": "EXTRACELLULAR",
}


def test_repair() -> None:
    compounds: Dict[str, ParseCompound] = {
        "cpd1_c": ParseCompound(
            id="cpd1",
            base_id="cpd1",
            charge=1,
            formula={"C": 6},
            compartment="CYTOSOL",
        ),
        "cpd2_c": ParseCompound(
            id="cpd2",
            base_id="cpd2",
            charge=1,
            formula={"C": 6},
            compartment="CYTOSOL",
        ),
        "cpd3_c": ParseCompound(
            id="cpd3",
            base_id="cpd3",
            charge=2,
            formula={"C": 6},
            compartment="CYTOSOL",
        ),
        "cpd4_c": ParseCompound(
            id="cpd4",
            base_id="cpd4",
            charge=1,
            formula={"C": 3},
            compartment="CYTOSOL",
        ),
    }
    compound_types: Dict[str, List[str]] = {
        "T1": ["cpd1_c"],
        "T2": ["cpd2_c"],
        "T3": ["cpd3_c"],
        "T4": ["cpd4_c"],
    }
    reactions: Dict[str, ParseReaction] = {
        "RXN-PASS": ParseReaction(
            id="RXN1",
            base_id="RXN1",
            substrates={"cpd1_c": -1},
            substrate_compartments={"cpd1_c": "CCO-IN"},
            products={"cpd2_c": 1},
            product_compartments={"cpd2_c": "CCO-IN"},
            gibbs0=-10,
            direction="LEFT-TO-RIGHT",
            locations=[],
            reversible=False,
        ),
        "RXN-fail-on-cpd-existence": ParseReaction(
            id="RXN2",
            base_id="RXN2",
            substrates={"cpdX_c": -1},
            substrate_compartments={"cpdX_c": "CCO-IN"},
            products={"cpd2_c": 1},
            product_compartments={"cpd2_c": "CCO-IN"},
            gibbs0=-10,
            direction="LEFT-TO-RIGHT",
            locations=[],
            reversible=False,
        ),
        "RXN-fail-on-charge-balance": ParseReaction(
            id="RXN3",
            base_id="RXN3",
            substrates={"cpd1_c": -1},
            substrate_compartments={"cpd1_c": "CCO-IN"},
            products={"cpd3_c": 1},
            product_compartments={"cpd3_c": "CCO-IN"},
            gibbs0=-10,
            direction="LEFT-TO-RIGHT",
            locations=[],
            reversible=False,
        ),
        "RXN-fail-on-mass-balance": ParseReaction(
            id="RXN4",
            base_id="RXN4",
            substrates={"cpd1_c": -1},
            substrate_compartments={"cpd1_c": "CCO-IN"},
            products={"cpd4_c": 1},
            product_compartments={"cpd4_c": "CCO-IN"},
            gibbs0=-10,
            direction="LEFT-TO-RIGHT",
            locations=[],
            reversible=False,
        ),
        "RXN-create-variants": ParseReaction(
            id="RXN5",
            base_id="RXN5",
            substrates={"T1": -1},
            substrate_compartments={"T1": "CCO-IN"},
            products={"T2": 1},
            product_compartments={"T2": "CCO-IN"},
            gibbs0=-10,
            direction="LEFT-TO-RIGHT",
            locations=[],
            reversible=False,
        ),
        "RXN-create-compartment-variants": ParseReaction(
            id="RXN6",
            base_id="RXN6",
            substrates={"cpd1_c": -1},
            substrate_compartments={"cpd1_c": "CCO-IN"},
            products={"cpd1_c": 1},
            product_compartments={"cpd1_c": "CCO-OUT"},
            gibbs0=-10,
            direction="LEFT-TO-RIGHT",
            locations=["CCO-EXTRACELLULAR-CCO-CYTOSOL"],
            reversible=False,
        ),
        "RXN-create-compartment-variants-fail-on-stoichiometry": ParseReaction(
            id="RXN7",
            base_id="RXN7",
            substrates={"cpd1_c": -1},
            substrate_compartments={"cpd1_c": "CCO-IN"},
            products={"cpd1_c": 1},
            product_compartments={"cpd1_c": "CCO-OUT"},
            gibbs0=-10,
            direction="LEFT-TO-RIGHT",
            locations=["CCO-CYTOSOL-CCO-CYTOSOL"],
            reversible=False,
        ),
    }
    r = Repairer(
        compounds=compounds,
        compound_types=compound_types,
        reactions=reactions,
        compartment_map=COMPARTMENT_MAP,
    )
    _, parsed_reactions, _ = r.repair()
    assert set([i.id for i in parsed_reactions]) == {"RXN1_c", "RXN6_c_e", "RXN5__var__0_c"}
