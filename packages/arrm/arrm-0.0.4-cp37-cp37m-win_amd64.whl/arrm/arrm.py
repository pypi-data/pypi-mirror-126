# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _arrm
else:
    import _arrm

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class ARRMSim(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    biceps_active = property(_arrm.ARRMSim_biceps_active_get, _arrm.ARRMSim_biceps_active_set)
    triceps_active = property(_arrm.ARRMSim_triceps_active_get, _arrm.ARRMSim_triceps_active_set)
    delt_ant_active = property(_arrm.ARRMSim_delt_ant_active_get, _arrm.ARRMSim_delt_ant_active_set)
    delt_med_active = property(_arrm.ARRMSim_delt_med_active_get, _arrm.ARRMSim_delt_med_active_set)
    delt_post_active = property(_arrm.ARRMSim_delt_post_active_get, _arrm.ARRMSim_delt_post_active_set)
    pec_m_2_active = property(_arrm.ARRMSim_pec_m_2_active_get, _arrm.ARRMSim_pec_m_2_active_set)
    lat_2_active = property(_arrm.ARRMSim_lat_2_active_get, _arrm.ARRMSim_lat_2_active_set)
    fcr_active = property(_arrm.ARRMSim_fcr_active_get, _arrm.ARRMSim_fcr_active_set)
    ecr_l_active = property(_arrm.ARRMSim_ecr_l_active_get, _arrm.ARRMSim_ecr_l_active_set)
    string_active = property(_arrm.ARRMSim_string_active_get, _arrm.ARRMSim_string_active_set)
    locked_shoulder_add_abd = property(_arrm.ARRMSim_locked_shoulder_add_abd_get, _arrm.ARRMSim_locked_shoulder_add_abd_set)
    start_angle_shoulder_add_abd = property(_arrm.ARRMSim_start_angle_shoulder_add_abd_get, _arrm.ARRMSim_start_angle_shoulder_add_abd_set)
    locked_shoulder_ext_flex = property(_arrm.ARRMSim_locked_shoulder_ext_flex_get, _arrm.ARRMSim_locked_shoulder_ext_flex_set)
    start_angle_shoulder_ext_flex = property(_arrm.ARRMSim_start_angle_shoulder_ext_flex_get, _arrm.ARRMSim_start_angle_shoulder_ext_flex_set)
    locked_shoulder_twist = property(_arrm.ARRMSim_locked_shoulder_twist_get, _arrm.ARRMSim_locked_shoulder_twist_set)
    start_angle_shoulder_twist = property(_arrm.ARRMSim_start_angle_shoulder_twist_get, _arrm.ARRMSim_start_angle_shoulder_twist_set)
    locked_elbow = property(_arrm.ARRMSim_locked_elbow_get, _arrm.ARRMSim_locked_elbow_set)
    start_angle_elbow = property(_arrm.ARRMSim_start_angle_elbow_get, _arrm.ARRMSim_start_angle_elbow_set)
    biceps_long = property(_arrm.ARRMSim_biceps_long_get, _arrm.ARRMSim_biceps_long_set)
    triceps_long = property(_arrm.ARRMSim_triceps_long_get, _arrm.ARRMSim_triceps_long_set)
    delt_ant = property(_arrm.ARRMSim_delt_ant_get, _arrm.ARRMSim_delt_ant_set)
    delt_med = property(_arrm.ARRMSim_delt_med_get, _arrm.ARRMSim_delt_med_set)
    delt_post = property(_arrm.ARRMSim_delt_post_get, _arrm.ARRMSim_delt_post_set)
    pec_med = property(_arrm.ARRMSim_pec_med_get, _arrm.ARRMSim_pec_med_set)
    lat = property(_arrm.ARRMSim_lat_get, _arrm.ARRMSim_lat_set)
    fcr = property(_arrm.ARRMSim_fcr_get, _arrm.ARRMSim_fcr_set)
    ecr = property(_arrm.ARRMSim_ecr_get, _arrm.ARRMSim_ecr_set)

    def __init__(self, timestep, sim_length, visualisation):
        _arrm.ARRMSim_swiginit(self, _arrm.new_ARRMSim(timestep, sim_length, visualisation))

    def setVisualiserDirectory(self, dir):
        return _arrm.ARRMSim_setVisualiserDirectory(self, dir)

    def setMuscleActivity(self, muscle, alpha, beta, gamma):
        return _arrm.ARRMSim_setMuscleActivity(self, muscle, alpha, beta, gamma)

    def getMuscleIa(self, muscle):
        return _arrm.ARRMSim_getMuscleIa(self, muscle)

    def getMuscleIb(self, muscle):
        return _arrm.ARRMSim_getMuscleIb(self, muscle)

    def getMuscleII(self, muscle):
        return _arrm.ARRMSim_getMuscleII(self, muscle)

    def begin(self):
        return _arrm.ARRMSim_begin(self)

    def update(self):
        return _arrm.ARRMSim_update(self)

    def end(self):
        return _arrm.ARRMSim_end(self)
    __swig_destroy__ = _arrm.delete_ARRMSim

# Register ARRMSim in _arrm:
_arrm.ARRMSim_swigregister(ARRMSim)

import sys
import os
import shutil
import inspect
from shutil import copyfile, copy2
def loadResources(arrmsim):
    filename = inspect.getframeinfo(inspect.currentframe()).filename
    path = os.path.dirname(os.path.abspath(filename))
	
    try:
        print('Copying simulation resource files to: ', os.getcwd()) 
        file_dir = path + '/Geometry'
        shutil.copytree(file_dir, os.getcwd() + '/Geometry')
        file_dir = os.path.join(path, 'MoBL_ARMS_module2_4_onemuscle_afferent.osim')
        shutil.copy2(file_dir, os.getcwd())
        file_dir = os.path.join(path, 'MoBL_ARMS_module2_4_onemuscle_afferent_no_string.osim')
        shutil.copy2(file_dir, os.getcwd())
        print('Success.')
    except:
        print("Simluation Resources already loaded.")
        
    arrmsim.setVisualiserDirectory(path)