Metadata-Version: 2.1
Name: DRE
Version: 1.1.27
Summary: Deep Recursive Embedding for High-Dimensional Data
Home-page: https://github.com/zuxinrui/DRE
Author: Xinrui Zu
Author-email: zuxinrui95@gmail.com
License: LICENSE
Keywords: Dimensionality Reduction t-SNE UMAP Representation Learning
Platform: UNKNOWN
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: C
Classifier: Programming Language :: Python
Classifier: Topic :: Software Development
Classifier: Topic :: Scientific/Engineering
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX
Classifier: Operating System :: Unix
Classifier: Operating System :: MacOS
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: License :: OSI Approved :: MIT License
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: scikit-learn (>=0.16)
Requires-Dist: numba (>=0.34)
Requires-Dist: torch (>=1.0)
Requires-Dist: tqdm
Requires-Dist: ipywidgets

# Deep Recursive Embedding

Deep Recursive Embedding (DRE) is a novel demensionality reduction method based on a generic deep embedding network (DEN) framework, which is able to learn a parametric mapping from high-dimensional space to low-dimensional space, guided by a recursive training strategy. DRE makes use of the latent data representations for boosted embedding performance.

Lab github DRE page:
[Tao Lab](https://github.com/tao-aimi/DeepRecursiveEmbedding)

Maintainer's github DRE page:
[Xinrui Zu](https://github.com/zuxinrui/DeepRecursiveEmbedding)

## MNIST embedding result

![gif](/images/MNIST-conv.gif)

## Installation

DRE can be installed with a simple PyPi command:

`pip install DRE`

The pre-requests of DRE are:

`numpy >= 1.19`
`scikit-learn >= 0.16`
`matplotlib`
`numba >= 0.34`
`torch >= 1.0`

## How to use DRE

DRE follows the form of `Scikit-learn` APIs, whose `fit_transform` function is for returning the embedding result and `fit` for the whole model:

```python
from DRE import DeepRecursiveEmbedding

dre = DeepRecursiveEmbedding()
# return the embedding result:
y = dre.fit_transform(x)
# or return the whole model:
dre.fit(x)
```
Copy and run `test_mnist.py` or `test_mnist.ipynb` to check the embedding procedure of MNIST dataset.

## 


