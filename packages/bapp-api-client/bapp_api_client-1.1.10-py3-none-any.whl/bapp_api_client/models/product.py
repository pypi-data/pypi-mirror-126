# coding: utf-8

"""
    BAPP API

    Test description  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Product(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'category': 'int',
        'type': 'int',
        'currency': 'str',
        'unit': 'str',
        'name': 'str',
        'price': 'str',
        'discountable': 'bool',
        'tax': 'str',
        'code': 'str',
        'code_ean': 'str',
        'former_product_id': 'int',
        'active': 'bool',
        'minimum_stock': 'str',
        'components': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'category': 'category',
        'type': 'type',
        'currency': 'currency',
        'unit': 'unit',
        'name': 'name',
        'price': 'price',
        'discountable': 'discountable',
        'tax': 'tax',
        'code': 'code',
        'code_ean': 'code_ean',
        'former_product_id': 'former_product_id',
        'active': 'active',
        'minimum_stock': 'minimum_stock',
        'components': 'components'
    }

    def __init__(self, id=None, category=None, type=None, currency=None, unit=None, name=None, price=None, discountable=None, tax=None, code=None, code_ean=None, former_product_id=None, active=None, minimum_stock=None, components=None, _configuration=None):  # noqa: E501
        """Product - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._category = None
        self._type = None
        self._currency = None
        self._unit = None
        self._name = None
        self._price = None
        self._discountable = None
        self._tax = None
        self._code = None
        self._code_ean = None
        self._former_product_id = None
        self._active = None
        self._minimum_stock = None
        self._components = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if category is not None:
            self.category = category
        self.type = type
        if currency is not None:
            self.currency = currency
        self.unit = unit
        self.name = name
        self.price = price
        if discountable is not None:
            self.discountable = discountable
        if tax is not None:
            self.tax = tax
        if code is not None:
            self.code = code
        if code_ean is not None:
            self.code_ean = code_ean
        if former_product_id is not None:
            self.former_product_id = former_product_id
        if active is not None:
            self.active = active
        if minimum_stock is not None:
            self.minimum_stock = minimum_stock
        if components is not None:
            self.components = components

    @property
    def id(self):
        """Gets the id of this Product.  # noqa: E501


        :return: The id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Product.


        :param id: The id of this Product.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def category(self):
        """Gets the category of this Product.  # noqa: E501


        :return: The category of this Product.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Product.


        :param category: The category of this Product.  # noqa: E501
        :type: int
        """

        self._category = category

    @property
    def type(self):
        """Gets the type of this Product.  # noqa: E501


        :return: The type of this Product.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Product.


        :param type: The type of this Product.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def currency(self):
        """Gets the currency of this Product.  # noqa: E501


        :return: The currency of this Product.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Product.


        :param currency: The currency of this Product.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def unit(self):
        """Gets the unit of this Product.  # noqa: E501


        :return: The unit of this Product.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Product.


        :param unit: The unit of this Product.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                unit is not None and len(unit) > 20):
            raise ValueError("Invalid value for `unit`, length must be less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                unit is not None and len(unit) < 1):
            raise ValueError("Invalid value for `unit`, length must be greater than or equal to `1`")  # noqa: E501

        self._unit = unit

    @property
    def name(self):
        """Gets the name of this Product.  # noqa: E501


        :return: The name of this Product.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Product.


        :param name: The name of this Product.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def price(self):
        """Gets the price of this Product.  # noqa: E501


        :return: The price of this Product.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Product.


        :param price: The price of this Product.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def discountable(self):
        """Gets the discountable of this Product.  # noqa: E501


        :return: The discountable of this Product.  # noqa: E501
        :rtype: bool
        """
        return self._discountable

    @discountable.setter
    def discountable(self, discountable):
        """Sets the discountable of this Product.


        :param discountable: The discountable of this Product.  # noqa: E501
        :type: bool
        """

        self._discountable = discountable

    @property
    def tax(self):
        """Gets the tax of this Product.  # noqa: E501


        :return: The tax of this Product.  # noqa: E501
        :rtype: str
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this Product.


        :param tax: The tax of this Product.  # noqa: E501
        :type: str
        """

        self._tax = tax

    @property
    def code(self):
        """Gets the code of this Product.  # noqa: E501


        :return: The code of this Product.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Product.


        :param code: The code of this Product.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                code is not None and len(code) > 40):
            raise ValueError("Invalid value for `code`, length must be less than or equal to `40`")  # noqa: E501

        self._code = code

    @property
    def code_ean(self):
        """Gets the code_ean of this Product.  # noqa: E501


        :return: The code_ean of this Product.  # noqa: E501
        :rtype: str
        """
        return self._code_ean

    @code_ean.setter
    def code_ean(self, code_ean):
        """Sets the code_ean of this Product.


        :param code_ean: The code_ean of this Product.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                code_ean is not None and len(code_ean) > 40):
            raise ValueError("Invalid value for `code_ean`, length must be less than or equal to `40`")  # noqa: E501

        self._code_ean = code_ean

    @property
    def former_product_id(self):
        """Gets the former_product_id of this Product.  # noqa: E501


        :return: The former_product_id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._former_product_id

    @former_product_id.setter
    def former_product_id(self, former_product_id):
        """Sets the former_product_id of this Product.


        :param former_product_id: The former_product_id of this Product.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                former_product_id is not None and former_product_id > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `former_product_id`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                former_product_id is not None and former_product_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `former_product_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._former_product_id = former_product_id

    @property
    def active(self):
        """Gets the active of this Product.  # noqa: E501


        :return: The active of this Product.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Product.


        :param active: The active of this Product.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def minimum_stock(self):
        """Gets the minimum_stock of this Product.  # noqa: E501

        Folosit pentru a genera alerte de stock  # noqa: E501

        :return: The minimum_stock of this Product.  # noqa: E501
        :rtype: str
        """
        return self._minimum_stock

    @minimum_stock.setter
    def minimum_stock(self, minimum_stock):
        """Sets the minimum_stock of this Product.

        Folosit pentru a genera alerte de stock  # noqa: E501

        :param minimum_stock: The minimum_stock of this Product.  # noqa: E501
        :type: str
        """

        self._minimum_stock = minimum_stock

    @property
    def components(self):
        """Gets the components of this Product.  # noqa: E501


        :return: The components of this Product.  # noqa: E501
        :rtype: list[int]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this Product.


        :param components: The components of this Product.  # noqa: E501
        :type: list[int]
        """

        self._components = components

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Product, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Product):
            return True

        return self.to_dict() != other.to_dict()
