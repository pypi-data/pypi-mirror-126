# The starting point of this script are the links provided on the maturing doc:
# * https://github.com/nanoporetech/fast-ctc-decode/blob/b226ea0f2b2f4f474eff47349703d57d2ea4801b/.github/workflows/publish.yml
# * https://github.com/konstin/complex-manylinux-maturin-docker/blob/main/.github/workflows/build.yml

name: publish-cdshealpix-wheels

# Exec only if a tag starting by 'v' is pushed
# see: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
on:
  push:
    tags:
       - v*

# Jobs run in parallel, see https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobs 
# Github hosted runner are: see https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
jobs:
  
  # Linux is specifi because of manylinux, we have to use a docker file 
  build-linux64-wheels:
    # Containers run in Linux
    runs-on: ubuntu-latest
    # Docker Hub image that 'build-linux-wheels' executes in.
    # See https://github.com/pypa/manylinux for this particular container:
    # * CPython 3.5, 3.6, 3.7, 3.8 and 3.9, installed in /opt/python/<python tag>-<abi tag>
    container: quay.io/pypa/manylinux2014_x86_64
    # We are now in CentOS 7 64 bits
    steps:
     - name: "Checkout the full project"
       uses: actions/checkout@v1
     # We need to install rust in the docker image (else, cargo is already available in github action)  
     - name: "Install Rust"
       run: |
         curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
     # Build wheels for all pre-installed python version (in /opt/python/, see docker image comment)
     # installing first maturin and using maturin: https://github.com/PyO3/maturin#pypy
     # For secrets, see https://docs.github.com/en/actions/reference/encrypted-secrets
     - name: "Build and publish wheels"
       shell: bash
       env:
        MATURIN_USERNAME: ${{ secrets.PYPI_USERNAME_FXP }}
        MATURIN_PASSWORD: ${{ secrets.PYPI_PASSWORD_FXP }}
       run: |
         source $HOME/.cargo/env
         for PYBIN in /opt/python/cp3[678910]*/bin; do
           "${PYBIN}/pip" install maturin
           "${PYBIN}/maturin" publish -i "${PYBIN}/python" --skip-existing --manylinux 2014 --username "$MATURIN_USERNAME"
         done

  # Linux is specifi because of manylinux, we have to use a docker file 
  build-linux32-wheels:
    # Containers run in Linux
    runs-on: ubuntu-latest
    # Docker Hub image that 'build-linux-wheels' executes in.
    # See https://github.com/pypa/manylinux for this particular container:
    # * CPython 3.5, 3.6, 3.7, 3.8 and 3.9, installed in /opt/python/<python tag>-<abi tag>
    container: quay.io/pypa/manylinux2014_i686
    # We are now in CentOS 7 32 bits
    steps:
     # Checkout the project        
     - name: "Checkout the full project"
       uses: actions/checkout@v1
     # We need to install rust in the docker image (else, cargo is already available in github action)  
     - name: "Install Rust"
       run: |
         curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-host i686-unknown-linux-gnu -y
     # Build wheels for all pre-installed python version (in /opt/python/, see docker image comment)
     # installing first maturin and using maturin: https://github.com/PyO3/maturin#pypy
     # For secrets, see https://docs.github.com/en/actions/reference/encrypted-secrets
     - name: "Build and publish wheels"
       shell: bash
       env:
        MATURIN_USERNAME: ${{ secrets.PYPI_USERNAME_FXP }}
        MATURIN_PASSWORD: ${{ secrets.PYPI_PASSWORD_FXP }}
       run: |
         source $HOME/.cargo/env
         for PYBIN in /opt/python/cp3[678910]*/bin; do
           "${PYBIN}/pip" install maturin
           #"${PYBIN}/maturin" build --release -i "${PYBIN}/python" --no-sdist --manylinux 2014
           "${PYBIN}/maturin" publish -i "${PYBIN}/python" --skip-existing --no-sdist --manylinux 2014 --username "$MATURIN_USERNAME"
         done 

  build-macos-and-windows-wheels:      
    runs-on: ${{ matrix.os }}
    strategy:
      # See https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategyfail-fast
      # run all matrix jobs even if on is failling (default behaviour is to stop all jobs)
      fail-fast: false      
      matrix:
        os: [windows-latest, macOS-latest]
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
    steps:
     # Checkout the project       
     - uses: actions/checkout@v2
     #  Set up python, see https://docs.github.com/en/actions/guides/building-and-testing-python  
     - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
       uses: actions/setup-python@v2
       with:
         python-version: ${{ matrix.python-version }}
     # For secrets, see https://docs.github.com/en/actions/reference/encrypted-secrets
     - name: Build and publish wheel for Python ${{ matrix.python-version }} on ${{ matrix.os }}
       # We do not use environement variable for user, because it seems that the way of providing it in the command
       # line is not the same for macos and for windows. We should create 2 different actions (see 
       # https://docs.github.com/en/actions/reference/encrypted-secrets )
       env:
        MATURIN_PASSWORD: ${{ secrets.PYPI_PASSWORD_FXP }}
       run: |
         #python3 -m pip install maturin
         pip install maturin
         #maturin build --release --no-sdist
         #maturin publish --no-sdist --skip-existing --username fxpineau 
         maturin publish --interpreter python${{matrix.python_version}} --skip-existing --username fxpineau 

  # See e.g.: https://blog.flozz.fr/2020/09/21/deployer-automatiquement-sur-github-pages-avec-github-actions/
  #    using: https://github.com/JamesIves/github-pages-deploy-action
  deploy-doc:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout branch ${{ github.head_ref }}"
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: "Set up Python 3.6 on Ubuntu"
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: "Build doc"
        run: |
          # Build the doc
          # - Install virtualenv     
          pip install virtualenv
          # - Create and activate a new virtualenv
          virtualenv cdshealpixenv
          source cdshealpixenv/bin/activate
          # - Install maturin
          pip install maturin
          # - Build and install cdshealpix
          maturin develop --release
          # - Install dependencies needed to run benches
          pip install -r requirements-doc.txt
          # - Build the doc: once done, it is in docs/_build/html/
          cd ./docs
          make html
          cd ..
          # Switch of the virtualenv
          deactivate
      - name: "Publish doc on github pages (commit on branch gh-pages)"
        uses: JamesIves/github-pages-deploy-action@4.1.0
        with:
          branch: gh-pages
          folder: docs/_build/html/
        
