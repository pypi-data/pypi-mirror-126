#!/usr/bin/env python

import os
import sys
import argparse
import subprocess
import PanChIP.commands as commands

lib_name = 'Test'

class Panchip(object):

    def __init__(self):
        parser = commands.panchip_parser()

        option_ix = 1
        while (option_ix < len(sys.argv) and
               sys.argv[option_ix].startswith('-')):
            option_ix += 1
                
        args = parser.parse_args(sys.argv[1:option_ix+1])
        
        if args.command is None or not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        
        command = " ".join(sys.argv)
        
        import PanChIP
        
        getattr(self, args.command)([sys.argv[0]] + sys.argv[option_ix:])
            
    def init(self, argv):
        parser = commands.init_parser()

        args = parser.parse_args(argv[2:])

        lib_dir = os.path.abspath(args.library_directory)
        os.makedirs(lib_dir, exist_ok = True)
        
        import gdown
        
        lib_zip_path = lib_dir + '/' + lib_name + '.zip'
        
        subprocess.call(['gdown', '-O', lib_zip_path, 'https://drive.google.com/uc?id=1Ccc1InE1WIvuFGKFz9ki8KwEvefpBlHu'])
        
        import zipfile
        
        with zipfile.ZipFile(lib_zip_path,'r') as zip_ref:
            zip_ref.extractall(lib_dir)
            
        subprocess.call(['rm', lib_zip_path])
        
    def analysis(self, argv):
        parser = commands.analysis_parser()

        args = parser.parse_args(argv[2:])
        
        lib_dir = os.path.abspath(args.library_directory)
        input_dir = os.path.abspath(args.input_directory)
        output_dir = os.path.abspath(args.output_directory)
        thread = str(args.threads)
        repeat = str(args.repeats)
        
        f = open(output_dir + '/bedfiles.sh','w+')
        f.write('#!/bin/bash\nls ' + input_dir + ' | awk \'{printf "%s ", $1}\' | sed \'s/.bed//g\' > ' + output_dir + '/bedfiles.txt')
        f.close()
        
        subprocess.call(['sh', output_dir + '/bedfiles.sh'])
        
        input_list = open(output_dir + '/bedfiles.txt', 'r').read().rstrip()
        subprocess.call(['rm', output_dir + '/bedfiles.sh'])
        subprocess.call(['rm', output_dir + '/bedfiles.txt'])
        
        f = open(output_dir + '/executable.sh','w+')
        f.write('#!/bin/bash\n\ninputfiles="' + input_list + '"\ninput="' + input_dir + '"\noutput="' + output_dir + '"\nlib="' + lib_dir + '/' + lib_name + '"\nthreads="' + thread + '"\nrepeat="' + repeat + '"\n\n')
        
        with open('PanChIP/analysis.sh') as infile:
            for line in infile:
                f.write(line)
                
        f.close()
        
        f = open(output_dir + '/analysis.sh','w+')
        f.write('#!/bin/bash\n\ncd ' + output_dir + '\n./executable.sh')
        f.close()
            

if __name__ == '__main__':
    Panchip()
