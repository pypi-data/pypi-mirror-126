{"version":3,"sources":["ReactFlowComponent.tsx","index.tsx"],"names":["ReactFlowComponent","state","numClicks","isFocused","render","props","args","elements","flowStyles","theme","style","borderStyling","primaryColor","border","outline","onClicked","setState","prevState","Streamlit","setComponentValue","_onFocus","_onBlur","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"kPAkBMA,E,4MACGC,MAAQ,CAAEC,UAAW,EAAGC,WAAW,G,EAEnCC,OAAS,WAGD,EAAKC,MAAMC,KAAX,KAAb,IACMC,EAAW,EAAKF,MAAMC,KAAX,SACXE,EAAa,EAAKH,MAAMC,KAAX,WAIXG,EAAU,EAAKJ,MAAfI,MACFC,EAA6B,GAInC,GAAID,EAAO,CAGT,IAAME,EAAa,oBACjB,EAAKV,MAAME,UAAYM,EAAMG,aAAe,QAE9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EA2BpB,OAAQ,kBAAC,IAAD,CAAWJ,SAAUA,EACdG,MAAOF,K,EAGdO,UAAY,WAGlB,EAAKC,UACH,SAAAC,GAAS,MAAK,CAAEf,UAAWe,EAAUf,UAAY,MACjD,kBAAMgB,IAAUC,kBAAkB,EAAKlB,MAAMC,e,EAOzCkB,SAAW,WACjB,EAAKJ,SAAS,CAAEb,WAAW,K,EAIrBkB,QAAU,WAChB,EAAKL,SAAS,CAAEb,WAAW,K,YAzEEmB,KAkFlBC,cAAwBvB,GChGvCwB,IAASpB,OACP,kBAAC,IAAMqB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ff53b4cc.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode,useState } from \"react\";\nimport ReactFlow,{Controls,updateEdge,addEdge} from \"react-flow-renderer\"\n\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass ReactFlowComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n    const elements = this.props.args['elements']\n    const flowStyles = this.props.args['flowStyles']\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    \n    // const BasicFlow = () => <ReactFlow elements={elements} style={flowStyles} />;\n    \n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n  //   return (\n  //     <span>\n  //       Guru, {name}! &nbsp;\n  //       <button\n  //         style={style}\n  //         onClick={this.onClicked}\n  //         disabled={this.props.disabled}\n  //         onFocus={this._onFocus}\n  //         onBlur={this._onBlur}\n  //       >\n  //         Click Me!\n  //       </button>\n  //     </span>\n  //   )\n  // }\n\n  return (<ReactFlow elements={elements}\n                 style={flowStyles}/>)};\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n  \n\n  \n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(ReactFlowComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport ReactFlowComponent from \"./ReactFlowComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReactFlowComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}