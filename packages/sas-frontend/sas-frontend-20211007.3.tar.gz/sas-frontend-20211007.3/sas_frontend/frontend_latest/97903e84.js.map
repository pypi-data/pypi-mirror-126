{"version":3,"file":"97903e84.js","mappings":";AAqDA;;;;AAKA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;;;;;AAMA;AACA;;AAEA;;AAEA;;AAGA;;;AAGA;AAEA;;;;;AAzEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACeA;;;;AAIA;;;AAdA;;;;;AAgCA;;;;;;ACPA;AACA;;;;;;;;;;;AAWA;AACA;;;AAtBA;;;;;;;;;;;;;AA3BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAoEA;;AApEA;;;;ACEA;;;;;;;;;;;;;;;;;;;ACAA;;;;;AAAA;;ACMA;;;;AAIA;;AAZA;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC8BA;;;AAKA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACnCA","sources":["webpack://sas-frontend/./src/components/ha-file-upload.ts","webpack://sas-frontend/./hassio/src/components/hassio-upload-backup.ts","webpack://sas-frontend/./hassio/src/dialogs/backup/dialog-hassio-backup-upload.ts","webpack://sas-frontend/./src/components/ha-card.ts","webpack://sas-frontend/./src/components/ha-circular-progress.ts","webpack://sas-frontend/./src/components/ha-header-bar.ts","webpack://sas-frontend/./src/components/ha-svg-icon.ts","webpack://sas-frontend/./src/onboarding/onboarding-restore-backup.ts","webpack://sas-frontend/./src/mixins/provide-hass-lit-mixin.ts"],"sourcesContent":["import \"@material/mwc-icon-button/mwc-icon-button\";\nimport { mdiClose } from \"@mdi/js\";\nimport \"@polymer/iron-input/iron-input\";\nimport \"@polymer/paper-input/paper-input-container\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-circular-progress\";\nimport \"./ha-svg-icon\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"file-picked\": { files: FileList };\n  }\n}\n\n@customElement(\"ha-file-upload\")\nexport class HaFileUpload extends LitElement {\n  @property() public accept!: string;\n\n  @property() public icon!: string;\n\n  @property() public label!: string;\n\n  @property() public value: string | TemplateResult | null = null;\n\n  @property({ type: Boolean }) private uploading = false;\n\n  @property({ type: Boolean, attribute: \"auto-open-file-dialog\" })\n  private autoOpenFileDialog = false;\n\n  @state() private _drag = false;\n\n  @query(\"#input\") private _input?: HTMLInputElement;\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    if (this.autoOpenFileDialog) {\n      this._input?.click();\n    }\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    if (changedProperties.has(\"_drag\") && !this.uploading) {\n      (\n        this.shadowRoot!.querySelector(\"paper-input-container\") as any\n      )._setFocused(this._drag);\n    }\n  }\n\n  public render(): TemplateResult {\n    return html`\n      ${this.uploading\n        ? html`<ha-circular-progress\n            alt=\"Uploading\"\n            size=\"large\"\n            active\n          ></ha-circular-progress>`\n        : html`\n            <label for=\"input\">\n              <paper-input-container\n                .alwaysFloatLabel=${Boolean(this.value)}\n                @drop=${this._handleDrop}\n                @dragenter=${this._handleDragStart}\n                @dragover=${this._handleDragStart}\n                @dragleave=${this._handleDragEnd}\n                @dragend=${this._handleDragEnd}\n                class=${classMap({\n                  dragged: this._drag,\n                })}\n              >\n                <label for=\"input\" slot=\"label\"> ${this.label} </label>\n                <iron-input slot=\"input\">\n                  <input\n                    id=\"input\"\n                    type=\"file\"\n                    class=\"file\"\n                    accept=${this.accept}\n                    @change=${this._handleFilePicked}\n                  />\n                  ${this.value}\n                </iron-input>\n                ${this.value\n                  ? html`<mwc-icon-button\n                      slot=\"suffix\"\n                      @click=${this._clearValue}\n                    >\n                      <ha-svg-icon .path=${mdiClose}></ha-svg-icon>\n                    </mwc-icon-button>`\n                  : html`<mwc-icon-button slot=\"suffix\">\n                      <ha-svg-icon .path=${this.icon}></ha-svg-icon>\n                    </mwc-icon-button>`}\n              </paper-input-container>\n            </label>\n          `}\n    `;\n  }\n\n  private _handleDrop(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    if (ev.dataTransfer?.files) {\n      fireEvent(this, \"file-picked\", { files: ev.dataTransfer.files });\n    }\n    this._drag = false;\n  }\n\n  private _handleDragStart(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this._drag = true;\n  }\n\n  private _handleDragEnd(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this._drag = false;\n  }\n\n  private _handleFilePicked(ev) {\n    fireEvent(this, \"file-picked\", { files: ev.target.files });\n  }\n\n  private _clearValue(ev: Event) {\n    ev.preventDefault();\n    this.value = null;\n    fireEvent(this, \"change\");\n  }\n\n  static get styles() {\n    return css`\n      paper-input-container {\n        position: relative;\n        padding: 8px;\n        margin: 0 -8px;\n      }\n      paper-input-container.dragged:before {\n        position: var(--layout-fit_-_position);\n        top: var(--layout-fit_-_top);\n        right: var(--layout-fit_-_right);\n        bottom: var(--layout-fit_-_bottom);\n        left: var(--layout-fit_-_left);\n        background: currentColor;\n        content: \"\";\n        opacity: var(--dark-divider-opacity);\n        pointer-events: none;\n        border-radius: 4px;\n      }\n      input.file {\n        display: none;\n      }\n      img {\n        max-width: 125px;\n        max-height: 125px;\n      }\n      mwc-icon-button {\n        --mdc-icon-button-size: 24px;\n        --mdc-icon-size: 20px;\n      }\n      ha-circular-progress {\n        display: block;\n        text-align-last: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-file-upload\": HaFileUpload;\n  }\n}\n","import \"@material/mwc-icon-button/mwc-icon-button\";\nimport { mdiFolderUpload } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input-container\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../src/common/dom/fire_event\";\nimport \"../../../src/components/ha-circular-progress\";\nimport \"../../../src/components/ha-file-upload\";\nimport \"../../../src/components/ha-svg-icon\";\nimport { extractApiErrorMessage } from \"../../../src/data/hassio/common\";\nimport { HassioBackup, uploadBackup } from \"../../../src/data/hassio/backup\";\nimport { showAlertDialog } from \"../../../src/dialogs/generic/show-dialog-box\";\nimport { HomeAssistant } from \"../../../src/types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"backup-uploaded\": { backup: HassioBackup };\n  }\n}\n\nconst MAX_FILE_SIZE = 1 * 1024 * 1024 * 1024; // 1GB\n\n@customElement(\"hassio-upload-backup\")\nexport class HassioUploadBackup extends LitElement {\n  public hass!: HomeAssistant;\n\n  @state() public value: string | null = null;\n\n  @state() private _uploading = false;\n\n  public render(): TemplateResult {\n    return html`\n      <ha-file-upload\n        .uploading=${this._uploading}\n        .icon=${mdiFolderUpload}\n        accept=\"application/x-tar\"\n        label=\"Upload backup\"\n        @file-picked=${this._uploadFile}\n        auto-open-file-dialog\n      ></ha-file-upload>\n    `;\n  }\n\n  private async _uploadFile(ev) {\n    const file = ev.detail.files[0];\n\n    if (file.size > MAX_FILE_SIZE) {\n      showAlertDialog(this, {\n        title: \"Backup file is too big\",\n        text: html`The maximum allowed filesize is 1GB.<br />\n          <a\n            href=\"https://www.smartautomatic.duckdns.org:8091/hassio/saos_common_tasks/#restoring-a-backup-on-a-new-install\"\n            target=\"_blank\"\n            >Have a look here on how to restore it.</a\n          >`,\n        confirmText: \"ok\",\n      });\n      return;\n    }\n\n    if (![\"application/x-tar\"].includes(file.type)) {\n      showAlertDialog(this, {\n        title: \"Unsupported file format\",\n        text: \"Please choose a SmartAutomatic backup file (.tar)\",\n        confirmText: \"ok\",\n      });\n      return;\n    }\n    this._uploading = true;\n    try {\n      const backup = await uploadBackup(this.hass, file);\n      fireEvent(this, \"backup-uploaded\", { backup: backup.data });\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: \"Upload failed\",\n        text: extractApiErrorMessage(err),\n        confirmText: \"ok\",\n      });\n    } finally {\n      this._uploading = false;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hassio-upload-backup\": HassioUploadBackup;\n  }\n}\n","import { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../src/common/dom/fire_event\";\nimport \"../../../../src/components/ha-header-bar\";\nimport { HassDialog } from \"../../../../src/dialogs/make-dialog-manager\";\nimport { haStyleDialog } from \"../../../../src/resources/styles\";\nimport type { HomeAssistant } from \"../../../../src/types\";\nimport \"../../components/hassio-upload-backup\";\nimport { HassioBackupUploadDialogParams } from \"./show-dialog-backup-upload\";\n\n@customElement(\"dialog-hassio-backup-upload\")\nexport class DialogHassioBackupUpload\n  extends LitElement\n  implements HassDialog<HassioBackupUploadDialogParams>\n{\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: HassioBackupUploadDialogParams;\n\n  public async showDialog(\n    params: HassioBackupUploadDialogParams\n  ): Promise<void> {\n    this._params = params;\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    if (this._params && !this._params.onboarding) {\n      if (this._params.reloadBackup) {\n        this._params.reloadBackup();\n      }\n    }\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        hideActions\n        .heading=${true}\n        @closed=${this.closeDialog}\n      >\n        <div slot=\"heading\">\n          <ha-header-bar>\n            <span slot=\"title\"> Upload backup </span>\n            <mwc-icon-button slot=\"actionItems\" dialogAction=\"cancel\">\n              <ha-svg-icon .path=${mdiClose}></ha-svg-icon>\n            </mwc-icon-button>\n          </ha-header-bar>\n        </div>\n        <hassio-upload-backup\n          @backup-uploaded=${this._backupUploaded}\n          .hass=${this.hass}\n        ></hassio-upload-backup>\n      </ha-dialog>\n    `;\n  }\n\n  private _backupUploaded(ev) {\n    const backup = ev.detail.backup;\n    this._params?.showBackup(backup.slug);\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n        }\n        /* overrule the ha-style-dialog max-height on small screens */\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-header-bar {\n            --mdc-theme-primary: var(--app-header-background-color);\n            --mdc-theme-on-primary: var(--app-header-text-color, white);\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-hassio-backup-upload\": DialogHassioBackupUpload;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { CircularProgress } from \"@material/mwc-circular-progress\";\nimport { CSSResultGroup, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-circular-progress\")\n// @ts-ignore\nexport class HaCircularProgress extends CircularProgress {\n  @property({ type: Boolean })\n  public active = false;\n\n  @property()\n  public alt = \"Loading\";\n\n  @property()\n  public size: \"tiny\" | \"small\" | \"medium\" | \"large\" = \"medium\";\n\n  // @ts-ignore\n  public set density(_) {\n    // just a dummy\n  }\n\n  public get density() {\n    switch (this.size) {\n      case \"tiny\":\n        return -8;\n      case \"small\":\n        return -5;\n      case \"medium\":\n        return 0;\n      case \"large\":\n        return 5;\n      default:\n        return 0;\n    }\n  }\n\n  // @ts-ignore\n  public set indeterminate(_) {\n    // just a dummy\n  }\n\n  public get indeterminate() {\n    return this.active;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        :host {\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-circular-progress\": HaCircularProgress;\n  }\n}\n","// @ts-ignore\nimport topAppBarStyles from \"@material/top-app-bar/dist/mdc.top-app-bar.min.css\";\nimport { css, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-header-bar\")\nexport class HaHeaderBar extends LitElement {\n  protected render() {\n    return html`<header class=\"mdc-top-app-bar\">\n      <div class=\"mdc-top-app-bar__row\">\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\"\n          id=\"navigation\"\n        >\n          <slot name=\"navigationIcon\"></slot>\n          <span class=\"mdc-top-app-bar__title\">\n            <slot name=\"title\"></slot>\n          </span>\n        </section>\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\"\n          id=\"actions\"\n          role=\"toolbar\"\n        >\n          <slot name=\"actionItems\"></slot>\n        </section>\n      </div>\n    </header>`;\n  }\n\n  static get styles() {\n    return [\n      unsafeCSS(topAppBarStyles),\n      css`\n        .mdc-top-app-bar {\n          position: static;\n          color: var(--mdc-theme-on-primary, #fff);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-header-bar\": HaHeaderBar;\n  }\n}\n","import { css, CSSResultGroup, LitElement, svg, SVGTemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-svg-icon\")\nexport class HaSvgIcon extends LitElement {\n  @property() public path?: string;\n\n  @property() public viewBox?: string;\n\n  protected render(): SVGTemplateResult {\n    return svg`\n    <svg\n      viewBox=${this.viewBox || \"0 0 24 24\"}\n      preserveAspectRatio=\"xMidYMid meet\"\n      focusable=\"false\">\n      <g>\n      ${this.path ? svg`<path d=${this.path}></path>` : \"\"}\n      </g>\n    </svg>`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: var(--ha-icon-display, inline-flex);\n        align-items: center;\n        justify-content: center;\n        position: relative;\n        vertical-align: middle;\n        fill: currentcolor;\n        width: var(--mdc-icon-size, 24px);\n        height: var(--mdc-icon-size, 24px);\n      }\n      svg {\n        width: 100%;\n        height: 100%;\n        pointer-events: none;\n        display: block;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-svg-icon\": HaSvgIcon;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../hassio/src/components/hassio-ansi-to-html\";\nimport { showHassioBackupDialog } from \"../../hassio/src/dialogs/backup/show-dialog-hassio-backup\";\nimport { showBackupUploadDialog } from \"../../hassio/src/dialogs/backup/show-dialog-backup-upload\";\nimport type { LocalizeFunc } from \"../common/translations/localize\";\nimport \"../components/ha-card\";\nimport { makeDialogManager } from \"../dialogs/make-dialog-manager\";\nimport { ProvideHassLitMixin } from \"../mixins/provide-hass-lit-mixin\";\nimport { haStyle } from \"../resources/styles\";\nimport \"./onboarding-loading\";\nimport { fetchInstallationType, InstallationType } from \"../data/onboarding\";\n\ndeclare global {\n  interface HASSDomEvents {\n    restoring: undefined;\n  }\n}\n\n@customElement(\"onboarding-restore-backup\")\nclass OnboardingRestoreBackup extends ProvideHassLitMixin(LitElement) {\n  @property() public localize!: LocalizeFunc;\n\n  @property() public language!: string;\n\n  @property({ type: Boolean }) public restoring = false;\n\n  @property({ attribute: false })\n  public installationType?: InstallationType;\n\n  protected render(): TemplateResult {\n    return this.restoring\n      ? html`<ha-card\n          .header=${this.localize(\n            \"ui.panel.page-onboarding.restore.in_progress\"\n          )}\n        >\n          <onboarding-loading></onboarding-loading>\n        </ha-card>`\n      : html`\n          <button class=\"link\" @click=${this._uploadBackup}>\n            ${this.localize(\"ui.panel.page-onboarding.restore.description\")}\n          </button>\n        `;\n  }\n\n  private _uploadBackup(): void {\n    showBackupUploadDialog(this, {\n      showBackup: (slug: string) => this._showBackupDialog(slug),\n      onboarding: true,\n    });\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    makeDialogManager(this, this.shadowRoot!);\n    setInterval(() => this._checkRestoreStatus(), 1000);\n  }\n\n  private async _checkRestoreStatus(): Promise<void> {\n    if (this.restoring) {\n      try {\n        await fetchInstallationType();\n      } catch (err: any) {\n        if ((err as Error).message === \"unauthorized\") {\n          window.location.replace(\"/\");\n        }\n      }\n    }\n  }\n\n  private _showBackupDialog(slug: string): void {\n    showHassioBackupDialog(this, {\n      slug,\n      onboarding: true,\n      localize: this.localize,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .logentry {\n          text-align: center;\n        }\n        ha-card {\n          padding: 4px;\n          margin-top: 8px;\n        }\n        hassio-ansi-to-html {\n          display: block;\n          line-height: 22px;\n          padding: 0 8px;\n          white-space: pre-wrap;\n        }\n\n        @media all and (min-width: 600px) {\n          ha-card {\n            width: 600px;\n            margin-left: -100px;\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"onboarding-restore-backup\": OnboardingRestoreBackup;\n  }\n}\n","import { PropertyValues, ReactiveElement } from \"lit\";\nimport { Constructor, HomeAssistant } from \"../types\";\n\nexport interface ProvideHassElement {\n  provideHass(element: HTMLElement);\n}\n\nexport const ProvideHassLitMixin = <T extends Constructor<ReactiveElement>>(\n  superClass: T\n) =>\n  class extends superClass {\n    protected hass!: HomeAssistant;\n\n    private __provideHass: HTMLElement[] = [];\n\n    public provideHass(el) {\n      this.__provideHass.push(el);\n      el.hass = this.hass;\n    }\n\n    protected updated(changedProps: PropertyValues) {\n      super.updated(changedProps);\n\n      if (changedProps.has(\"hass\")) {\n        this.__provideHass.forEach((el) => {\n          (el as any).hass = this.hass;\n        });\n      }\n    }\n  };\n"],"names":[],"sourceRoot":""}