{"version":3,"file":"16bbd8ac.js","mappings":";;;;;AAuEA;AACA;AACA;AACA;;;;;AAKA;;;;AAYA;AACA;;;AAGA;;;AAKA;;;;AAMA;;AAIA;AACA;AACA;;AAEA;;;AAIA;AACA;AACA;AACA;;;;;AAMA;AACA;;AAEA;AAEA;AACA;;AAEA;;;AAvEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9BA","sources":["webpack://sas-frontend/./src/panels/lovelace/editor/card-editor/hui-dialog-create-card.ts"],"sourcesContent":["import \"@material/mwc-tab-bar/mwc-tab-bar\";\nimport \"@material/mwc-tab/mwc-tab\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { cache } from \"lit/directives/cache\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoize from \"memoize-one\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { DataTableRowData } from \"../../../../components/data-table/ha-data-table\";\nimport \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-header-bar\";\nimport type { LovelaceViewConfig } from \"../../../../data/lovelace\";\nimport type { HassDialog } from \"../../../../dialogs/make-dialog-manager\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"./hui-card-picker\";\nimport \"./hui-entity-picker-table\";\nimport { CreateCardDialogParams } from \"./show-create-card-dialog\";\nimport { showEditCardDialog } from \"./show-edit-card-dialog\";\nimport { showSuggestCardDialog } from \"./show-suggest-card-dialog\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"selected-changed\": SelectedChangedEvent;\n  }\n}\n\ninterface SelectedChangedEvent {\n  selectedEntities: string[];\n}\n\n@customElement(\"hui-dialog-create-card\")\nexport class HuiCreateDialogCard\n  extends LitElement\n  implements HassDialog<CreateCardDialogParams>\n{\n  @property({ attribute: false }) protected hass!: HomeAssistant;\n\n  @state() private _params?: CreateCardDialogParams;\n\n  @state() private _viewConfig!: LovelaceViewConfig;\n\n  @state() private _selectedEntities: string[] = [];\n\n  @state() private _currTabIndex = 0;\n\n  public async showDialog(params: CreateCardDialogParams): Promise<void> {\n    this._params = params;\n    const [view] = params.path;\n    this._viewConfig = params.lovelaceConfig.views[view];\n  }\n\n  public closeDialog(): boolean {\n    this._params = undefined;\n    this._currTabIndex = 0;\n    this._selectedEntities = [];\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n    return true;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        @keydown=${this._ignoreKeydown}\n        @closed=${this._cancel}\n        .heading=${true}\n        class=${classMap({ table: this._currTabIndex === 1 })}\n      >\n        <div slot=\"heading\">\n          <ha-header-bar>\n            <span slot=\"title\">\n              ${this._viewConfig.title\n                ? this.hass!.localize(\n                    \"ui.panel.lovelace.editor.edit_card.pick_card_view_title\",\n                    \"name\",\n                    `\"${this._viewConfig.title}\"`\n                  )\n                : this.hass!.localize(\n                    \"ui.panel.lovelace.editor.edit_card.pick_card\"\n                  )}\n            </span>\n          </ha-header-bar>\n          <mwc-tab-bar\n            .activeIndex=${this._currTabIndex}\n            @MDCTabBar:activated=${this._handleTabChanged}\n          >\n            <mwc-tab\n              .label=${this.hass!.localize(\n                \"ui.panel.lovelace.editor.cardpicker.by_card\"\n              )}\n            ></mwc-tab>\n            <mwc-tab\n              .label=${this.hass!.localize(\n                \"ui.panel.lovelace.editor.cardpicker.by_entity\"\n              )}\n            ></mwc-tab>\n          </mwc-tab-bar>\n        </div>\n        ${cache(\n          this._currTabIndex === 0\n            ? html`\n                <hui-card-picker\n                  .lovelace=${this._params.lovelaceConfig}\n                  .hass=${this.hass}\n                  @config-changed=${this._handleCardPicked}\n                ></hui-card-picker>\n              `\n            : html`\n                <hui-entity-picker-table\n                  no-label-float\n                  .hass=${this.hass}\n                  .narrow=${true}\n                  .entities=${this._allEntities(this.hass.states)}\n                  @selected-changed=${this._handleSelectedChanged}\n                ></hui-entity-picker-table>\n              `\n        )}\n\n        <div slot=\"primaryAction\">\n          <mwc-button @click=${this._cancel}>\n            ${this.hass!.localize(\"ui.common.cancel\")}\n          </mwc-button>\n          ${this._selectedEntities.length\n            ? html`\n                <mwc-button @click=${this._suggestCards}>\n                  ${this.hass!.localize(\"ui.common.continue\")}\n                </mwc-button>\n              `\n            : \"\"}\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _ignoreKeydown(ev: KeyboardEvent) {\n    ev.stopPropagation();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          /* overrule the ha-style-dialog max-height on small screens */\n          ha-dialog {\n            --mdc-dialog-max-height: 100%;\n            height: 100%;\n          }\n        }\n\n        @media all and (min-width: 850px) {\n          ha-dialog {\n            --mdc-dialog-min-width: 845px;\n          }\n        }\n\n        ha-dialog {\n          --mdc-dialog-max-width: 845px;\n          --dialog-content-padding: 2px 24px 20px 24px;\n          --dialog-z-index: 5;\n        }\n\n        ha-dialog.table {\n          --dialog-content-padding: 0;\n        }\n\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n\n        @media (min-width: 1200px) {\n          ha-dialog {\n            --mdc-dialog-max-width: calc(100% - 32px);\n            --mdc-dialog-min-width: 1000px;\n          }\n        }\n\n        .header_button {\n          color: inherit;\n          text-decoration: none;\n        }\n\n        mwc-tab-bar {\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n\n        hui-entity-picker-table {\n          display: block;\n          height: calc(100vh - 198px);\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          hui-entity-picker-table {\n            height: calc(100vh - 158px);\n          }\n        }\n      `,\n    ];\n  }\n\n  private _handleCardPicked(ev) {\n    const config = ev.detail.config;\n    if (this._params!.entities && this._params!.entities.length) {\n      if (Object.keys(config).includes(\"entities\")) {\n        config.entities = this._params!.entities;\n      } else if (Object.keys(config).includes(\"entity\")) {\n        config.entity = this._params!.entities[0];\n      }\n    }\n\n    showEditCardDialog(this, {\n      lovelaceConfig: this._params!.lovelaceConfig,\n      saveConfig: this._params!.saveConfig,\n      path: this._params!.path,\n      cardConfig: config,\n    });\n\n    this.closeDialog();\n  }\n\n  private _handleTabChanged(ev: CustomEvent): void {\n    const newTab = ev.detail.index;\n    if (newTab === this._currTabIndex) {\n      return;\n    }\n\n    this._currTabIndex = ev.detail.index;\n    this._selectedEntities = [];\n  }\n\n  private _handleSelectedChanged(ev: CustomEvent): void {\n    this._selectedEntities = ev.detail.selectedEntities;\n  }\n\n  private _cancel(ev?: Event) {\n    if (ev) {\n      ev.stopPropagation();\n    }\n    this.closeDialog();\n  }\n\n  private _suggestCards(): void {\n    showSuggestCardDialog(this, {\n      lovelaceConfig: this._params!.lovelaceConfig,\n      saveConfig: this._params!.saveConfig,\n      path: this._params!.path as [number],\n      entities: this._selectedEntities,\n    });\n\n    this.closeDialog();\n  }\n\n  private _allEntities = memoize((entities) =>\n    Object.keys(entities).map((entity) => {\n      const stateObj = this.hass.states[entity];\n      return {\n        icon: \"\",\n        entity_id: entity,\n        stateObj,\n        name: computeStateName(stateObj),\n        domain: computeDomain(entity),\n        last_changed: stateObj!.last_changed,\n      } as DataTableRowData;\n    })\n  );\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-create-card\": HuiCreateDialogCard;\n  }\n}\n"],"names":[],"sourceRoot":""}