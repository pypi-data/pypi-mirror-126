{"version":3,"file":"c6962908.js","mappings":";;AAyCA;AACA;AACA;AACA;AACA;;;;;AAKA;;;AAIA;;;;;;;;;;;;;;;;;;AArCA;;;;AC0DA;;AAEA;;AAEA;;;;AAMA;AACA;;;;;;;;;AASA;;;AAIA;AACA;;;AAGA;;;;AAQA;AACA;AAGA;AACA;;;;;;AAMA;AAGA;AACA;AACA;;;;;;AAMA;AAGA;;;;;;;AAOA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;;;;AAtHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://sas-frontend/./src/common/search/search-input.ts","webpack://sas-frontend/./src/panels/lovelace/editor/config-elements/hui-stack-card-editor.ts"],"sourcesContent":["import \"@material/mwc-icon-button/mwc-icon-button\";\nimport { mdiClose, mdiMagnify } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport \"../../components/ha-svg-icon\";\nimport { fireEvent } from \"../dom/fire_event\";\n\n@customElement(\"search-input\")\nclass SearchInput extends LitElement {\n  @property() public filter?: string;\n\n  @property({ type: Boolean, attribute: \"no-label-float\" })\n  public noLabelFloat? = false;\n\n  @property({ type: Boolean, attribute: \"no-underline\" })\n  public noUnderline = false;\n\n  @property({ type: Boolean })\n  public autofocus = false;\n\n  @property({ type: String })\n  public label?: string;\n\n  public focus() {\n    this.shadowRoot!.querySelector(\"paper-input\")!.focus();\n  }\n\n  @query(\"paper-input\", true) private _input!: PaperInputElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-input\n        .autofocus=${this.autofocus}\n        .label=${this.label || \"Search\"}\n        .value=${this.filter}\n        @value-changed=${this._filterInputChanged}\n        .noLabelFloat=${this.noLabelFloat}\n      >\n        <slot name=\"prefix\" slot=\"prefix\">\n          <ha-svg-icon class=\"prefix\" .path=${mdiMagnify}></ha-svg-icon>\n        </slot>\n        ${this.filter &&\n        html`\n          <mwc-icon-button\n            slot=\"suffix\"\n            @click=${this._clearSearch}\n            title=\"Clear\"\n          >\n            <ha-svg-icon .path=${mdiClose}></ha-svg-icon>\n          </mwc-icon-button>\n        `}\n      </paper-input>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      changedProps.has(\"noUnderline\") &&\n      (this.noUnderline || changedProps.get(\"noUnderline\") !== undefined)\n    ) {\n      (\n        this._input.inputElement!.parentElement!.shadowRoot!.querySelector(\n          \"div.unfocused-line\"\n        ) as HTMLElement\n      ).style.display = this.noUnderline ? \"none\" : \"block\";\n    }\n  }\n\n  private async _filterChanged(value: string) {\n    fireEvent(this, \"value-changed\", { value: String(value) });\n  }\n\n  private async _filterInputChanged(e) {\n    this._filterChanged(e.target.value);\n  }\n\n  private async _clearSearch() {\n    this._filterChanged(\"\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-svg-icon,\n      mwc-icon-button {\n        color: var(--primary-text-color);\n      }\n      mwc-icon-button {\n        --mdc-icon-button-size: 24px;\n      }\n      ha-svg-icon.prefix {\n        margin: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"search-input\": SearchInput;\n  }\n}\n","import { mdiArrowLeft, mdiArrowRight, mdiDelete, mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-tabs\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport {\n  any,\n  array,\n  assert,\n  assign,\n  object,\n  optional,\n  string,\n} from \"superstruct\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport { LovelaceCardConfig, LovelaceConfig } from \"../../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { StackCardConfig } from \"../../cards/types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport \"../card-editor/hui-card-element-editor\";\nimport type { HuiCardElementEditor } from \"../card-editor/hui-card-element-editor\";\nimport \"../card-editor/hui-card-picker\";\nimport type { ConfigChangedEvent } from \"../hui-element-editor\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { GUIModeChangedEvent } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    cards: array(any()),\n    title: optional(string()),\n  })\n);\n\n@customElement(\"hui-stack-card-editor\")\nexport class HuiStackCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public lovelace?: LovelaceConfig;\n\n  @state() protected _config?: StackCardConfig;\n\n  @state() protected _selectedCard = 0;\n\n  @state() protected _GUImode = true;\n\n  @state() protected _guiModeAvailable? = true;\n\n  @query(\"hui-card-element-editor\")\n  protected _cardEditorEl?: HuiCardElementEditor;\n\n  public setConfig(config: Readonly<StackCardConfig>): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  public focusYamlEditor() {\n    this._cardEditorEl?.focusYamlEditor();\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n    const selected = this._selectedCard!;\n    const numcards = this._config.cards.length;\n\n    return html`\n      <div class=\"card-config\">\n        <div class=\"toolbar\">\n          <paper-tabs\n            .selected=${selected}\n            scrollable\n            @iron-activate=${this._handleSelectedCard}\n          >\n            ${this._config.cards.map(\n              (_card, i) => html` <paper-tab> ${i + 1} </paper-tab> `\n            )}\n          </paper-tabs>\n          <paper-tabs\n            id=\"add-card\"\n            .selected=${selected === numcards ? \"0\" : undefined}\n            @iron-activate=${this._handleSelectedCard}\n          >\n            <paper-tab>\n              <ha-svg-icon .path=${mdiPlus}></ha-svg-icon>\n            </paper-tab>\n          </paper-tabs>\n        </div>\n\n        <div id=\"editor\">\n          ${selected < numcards\n            ? html`\n                <div id=\"card-options\">\n                  <mwc-button\n                    @click=${this._toggleMode}\n                    .disabled=${!this._guiModeAvailable}\n                    class=\"gui-mode-button\"\n                  >\n                    ${this.hass!.localize(\n                      !this._cardEditorEl || this._GUImode\n                        ? \"ui.panel.lovelace.editor.edit_card.show_code_editor\"\n                        : \"ui.panel.lovelace.editor.edit_card.show_visual_editor\"\n                    )}\n                  </mwc-button>\n\n                  <mwc-icon-button\n                    .disabled=${selected === 0}\n                    .title=${this.hass!.localize(\n                      \"ui.panel.lovelace.editor.edit_card.move_before\"\n                    )}\n                    @click=${this._handleMove}\n                    .move=${-1}\n                  >\n                    <ha-svg-icon .path=${mdiArrowLeft}></ha-svg-icon>\n                  </mwc-icon-button>\n\n                  <mwc-icon-button\n                    .title=${this.hass!.localize(\n                      \"ui.panel.lovelace.editor.edit_card.move_after\"\n                    )}\n                    .disabled=${selected === numcards - 1}\n                    @click=${this._handleMove}\n                    .move=${1}\n                  >\n                    <ha-svg-icon .path=${mdiArrowRight}></ha-svg-icon>\n                  </mwc-icon-button>\n\n                  <mwc-icon-button\n                    .title=${this.hass!.localize(\n                      \"ui.panel.lovelace.editor.edit_card.delete\"\n                    )}\n                    @click=${this._handleDeleteCard}\n                  >\n                    <ha-svg-icon .path=${mdiDelete}></ha-svg-icon>\n                  </mwc-icon-button>\n                </div>\n\n                <hui-card-element-editor\n                  .hass=${this.hass}\n                  .value=${this._config.cards[selected]}\n                  .lovelace=${this.lovelace}\n                  @config-changed=${this._handleConfigChanged}\n                  @GUImode-changed=${this._handleGUIModeChanged}\n                ></hui-card-element-editor>\n              `\n            : html`\n                <hui-card-picker\n                  .hass=${this.hass}\n                  .lovelace=${this.lovelace}\n                  @config-changed=${this._handleCardPicked}\n                ></hui-card-picker>\n              `}\n        </div>\n      </div>\n    `;\n  }\n\n  protected _handleSelectedCard(ev) {\n    if (ev.target.id === \"add-card\") {\n      this._selectedCard = this._config!.cards.length;\n      return;\n    }\n    this._setMode(true);\n    this._guiModeAvailable = true;\n    this._selectedCard = parseInt(ev.detail.selected, 10);\n  }\n\n  protected _handleConfigChanged(ev: HASSDomEvent<ConfigChangedEvent>) {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    const cards = [...this._config.cards];\n    cards[this._selectedCard] = ev.detail.config as LovelaceCardConfig;\n    this._config = { ...this._config, cards };\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  protected _handleCardPicked(ev) {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    const config = ev.detail.config;\n    const cards = [...this._config.cards, config];\n    this._config = { ...this._config, cards };\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  protected _handleDeleteCard() {\n    if (!this._config) {\n      return;\n    }\n    const cards = [...this._config.cards];\n    cards.splice(this._selectedCard, 1);\n    this._config = { ...this._config, cards };\n    this._selectedCard = Math.max(0, this._selectedCard - 1);\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  protected _handleMove(ev: Event) {\n    if (!this._config) {\n      return;\n    }\n    const move = (ev.currentTarget as any).move;\n    const source = this._selectedCard;\n    const target = source + move;\n    const cards = [...this._config.cards];\n    const card = cards.splice(this._selectedCard, 1)[0];\n    cards.splice(target, 0, card);\n    this._config = {\n      ...this._config,\n      cards,\n    };\n    this._selectedCard = target;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  protected _handleGUIModeChanged(ev: HASSDomEvent<GUIModeChangedEvent>): void {\n    ev.stopPropagation();\n    this._GUImode = ev.detail.guiMode;\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n  }\n\n  protected _toggleMode(): void {\n    this._cardEditorEl?.toggleMode();\n  }\n\n  protected _setMode(value: boolean): void {\n    this._GUImode = value;\n    if (this._cardEditorEl) {\n      this._cardEditorEl!.GUImode = value;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configElementStyle,\n      css`\n        .toolbar {\n          display: flex;\n          --paper-tabs-selection-bar-color: var(--primary-color);\n          --paper-tab-ink: var(--primary-color);\n        }\n        paper-tabs {\n          display: flex;\n          font-size: 14px;\n          flex-grow: 1;\n        }\n        #add-card {\n          max-width: 32px;\n          padding: 0;\n        }\n\n        #card-options {\n          display: flex;\n          justify-content: flex-end;\n          width: 100%;\n        }\n\n        #editor {\n          border: 1px solid var(--divider-color);\n          padding: 12px;\n        }\n        @media (max-width: 450px) {\n          #editor {\n            margin: 0 -12px;\n          }\n        }\n\n        .gui-mode-button {\n          margin-right: auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-stack-card-editor\": HuiStackCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}