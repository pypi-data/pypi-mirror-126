{"version":3,"file":"db27a39d.js","mappings":";;;AA4DA;AACA;;AAKA;;;;;;;;AASA;AAIA;;;;;;;AASA;;;AAKA;AACA;;;AAMA;;;;;AAMA;AAIA;;;;;AAOA;AACA;;AAEA;AAEA;;;AAIA;;;;;AAKA;AAIA;;;;AAMA;;;;AAUA;AACA;;AAEA;AAEA;;;;;;;;AASA;AAIA;;;;;AAOA;AACA;;AAEA;AAEA;;;AAIA;;;;;AAKA;;;;AAMA;AACA;;AAEA;;AAjJA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhCA","sources":["webpack://sas-frontend/./src/panels/config/integrations/integration-panels/zwave_js/dialog-zwave_js-heal-node.ts"],"sourcesContent":["import \"../../../../../components/ha-circular-progress\";\nimport \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-linear-progress/mwc-linear-progress\";\nimport { mdiStethoscope, mdiCheckCircle, mdiCloseCircle } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { createCloseHeading } from \"../../../../../components/ha-dialog\";\nimport {\n  DeviceRegistryEntry,\n  computeDeviceName,\n} from \"../../../../../data/device_registry\";\nimport {\n  fetchNetworkStatus,\n  healNode,\n  ZWaveJSNetwork,\n} from \"../../../../../data/zwave_js\";\nimport { haStyleDialog } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ZWaveJSHealNodeDialogParams } from \"./show-dialog-zwave_js-heal-node\";\n\n@customElement(\"dialog-zwave_js-heal-node\")\nclass DialogZWaveJSHealNode extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private entry_id?: string;\n\n  @state() private node_id?: number;\n\n  @state() private device?: DeviceRegistryEntry;\n\n  @state() private _status?: string;\n\n  @state() private _error?: string;\n\n  public showDialog(params: ZWaveJSHealNodeDialogParams): void {\n    this.entry_id = params.entry_id;\n    this.device = params.device;\n    this.node_id = params.node_id;\n    this._fetchData();\n  }\n\n  public closeDialog(): void {\n    this.entry_id = undefined;\n    this._status = undefined;\n    this.node_id = undefined;\n    this.device = undefined;\n    this._error = undefined;\n\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this.entry_id || !this.device) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.zwave_js.heal_node.title\")\n        )}\n      >\n        ${!this._status\n          ? html`\n              <div class=\"flex-container\">\n                <ha-svg-icon\n                  .path=${mdiStethoscope}\n                  class=\"introduction\"\n                ></ha-svg-icon>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.heal_node.introduction\",\n                      {\n                        device: html`<em\n                          >${computeDeviceName(this.device, this.hass!)}</em\n                        >`,\n                      }\n                    )}\n                  </p>\n                </div>\n              </div>\n              <p>\n                <em>\n                  ${this.hass.localize(\n                    \"ui.panel.config.zwave_js.heal_node.traffic_warning\"\n                  )}\n                </em>\n              </p>\n              <mwc-button slot=\"primaryAction\" @click=${this._startHeal}>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.heal_node.start_heal\"\n                )}\n              </mwc-button>\n            `\n          : ``}\n        ${this._status === \"started\"\n          ? html`\n              <div class=\"flex-container\">\n                <ha-circular-progress active></ha-circular-progress>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.heal_node.in_progress\",\n                      {\n                        device: html`<em\n                          >${computeDeviceName(this.device, this.hass!)}</em\n                        >`,\n                      }\n                    )}\n                  </p>\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.common.close\")}\n              </mwc-button>\n            `\n          : ``}\n        ${this._status === \"failed\"\n          ? html`\n              <div class=\"flex-container\">\n                <ha-svg-icon\n                  .path=${mdiCloseCircle}\n                  class=\"failed\"\n                ></ha-svg-icon>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.heal_node.healing_failed\",\n                      {\n                        device: html`<em\n                          >${computeDeviceName(this.device, this.hass!)}</em\n                        >`,\n                      }\n                    )}\n                  </p>\n                  <p>\n                    ${this._error\n                      ? html` <em>${this._error}</em> `\n                      : `\n                  ${this.hass.localize(\n                    \"ui.panel.config.zwave_js.heal_node.healing_failed_check_logs\"\n                  )}\n                  `}\n                  </p>\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.common.close\")}\n              </mwc-button>\n            `\n          : ``}\n        ${this._status === \"finished\"\n          ? html`\n              <div class=\"flex-container\">\n                <ha-svg-icon\n                  .path=${mdiCheckCircle}\n                  class=\"success\"\n                ></ha-svg-icon>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.heal_node.healing_complete\",\n                      {\n                        device: html`<em\n                          >${computeDeviceName(this.device, this.hass!)}</em\n                        >`,\n                      }\n                    )}\n                  </p>\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.panel.config.zwave_js.common.close\")}\n              </mwc-button>\n            `\n          : ``}\n        ${this._status === \"network-healing\"\n          ? html`\n              <div class=\"flex-container\">\n                <ha-svg-icon\n                  .path=${mdiCloseCircle}\n                  class=\"failed\"\n                ></ha-svg-icon>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.heal_node.network_heal_in_progress\"\n                    )}\n                  </p>\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.panel.config.zwave_js.common.close\")}\n              </mwc-button>\n            `\n          : ``}\n      </ha-dialog>\n    `;\n  }\n\n  private async _fetchData(): Promise<void> {\n    if (!this.hass) {\n      return;\n    }\n    const network: ZWaveJSNetwork = await fetchNetworkStatus(\n      this.hass!,\n      this.entry_id!\n    );\n    if (network.controller.is_heal_network_active) {\n      this._status = \"network-healing\";\n    }\n  }\n\n  private async _startHeal(): Promise<void> {\n    if (!this.hass) {\n      return;\n    }\n    this._status = \"started\";\n    try {\n      this._status = (await healNode(this.hass, this.entry_id!, this.node_id!))\n        ? \"finished\"\n        : \"failed\";\n    } catch (err: any) {\n      this._error = err.message;\n      this._status = \"failed\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        .success {\n          color: var(--success-color);\n        }\n\n        .failed {\n          color: var(--error-color);\n        }\n\n        .flex-container {\n          display: flex;\n          align-items: center;\n        }\n\n        ha-svg-icon {\n          width: 68px;\n          height: 48px;\n        }\n\n        ha-svg-icon.introduction {\n          color: var(--primary-color);\n        }\n\n        .flex-container ha-svg-icon,\n        .flex-container ha-circular-progress {\n          margin-right: 20px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-zwave_js-heal-node\": DialogZWaveJSHealNode;\n  }\n}\n"],"names":[],"sourceRoot":""}