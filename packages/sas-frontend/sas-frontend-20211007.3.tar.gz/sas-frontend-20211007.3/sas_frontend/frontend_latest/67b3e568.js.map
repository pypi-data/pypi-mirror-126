{"version":3,"file":"67b3e568.js","mappings":";;;;AA4DA;AACA;;AAKA;;;;;;;;AASA;;;;;;AAQA;;;AAKA;AACA;;;AAMA;;;;AAKA;;;;AAMA;;;AAKA;;;AAKA;AACA;;AAIA;AACA;;AAEA;AAEA;;;AAIA;;;;;AAKA;;;;AAMA;AACA;;AAEA;AAEA;;;;;;;;AASA;;;;AAMA;AACA;;AAEA;AAEA;;;AAIA;;;;;AAKA;;;;AAMA;AACA;;AAEA;AAEA;;;AAIA;AACA;;;AAGA;;AA5IA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjCA","sources":["webpack://sas-frontend/./src/panels/config/integrations/integration-panels/zwave_js/dialog-zwave_js-heal-network.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-linear-progress/mwc-linear-progress\";\nimport { mdiStethoscope, mdiCheckCircle, mdiCloseCircle } from \"@mdi/js\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { createCloseHeading } from \"../../../../../components/ha-dialog\";\nimport {\n  fetchNetworkStatus,\n  healNetwork,\n  stopHealNetwork,\n  subscribeHealNetworkProgress,\n  ZWaveJSHealNetworkStatusMessage,\n  ZWaveJSNetwork,\n} from \"../../../../../data/zwave_js\";\nimport { haStyleDialog } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ZWaveJSHealNetworkDialogParams } from \"./show-dialog-zwave_js-heal-network\";\n\n@customElement(\"dialog-zwave_js-heal-network\")\nclass DialogZWaveJSHealNetwork extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private entry_id?: string;\n\n  @state() private _status?: string;\n\n  @state() private _progress_total = 0;\n\n  @state() private _progress_finished = 0;\n\n  @state() private _progress_in_progress = 0;\n\n  private _subscribed?: Promise<UnsubscribeFunc>;\n\n  public showDialog(params: ZWaveJSHealNetworkDialogParams): void {\n    this._progress_total = 0;\n    this.entry_id = params.entry_id;\n    this._fetchData();\n  }\n\n  public closeDialog(): void {\n    this.entry_id = undefined;\n    this._status = undefined;\n    this._progress_total = 0;\n\n    this._unsubscribe();\n\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this.entry_id) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.zwave_js.heal_network.title\")\n        )}\n      >\n        ${!this._status\n          ? html`\n              <div class=\"flex-container\">\n                <ha-svg-icon\n                  .path=${mdiStethoscope}\n                  class=\"introduction\"\n                ></ha-svg-icon>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.heal_network.introduction\"\n                    )}\n                  </p>\n                </div>\n              </div>\n              <p>\n                <em>\n                  ${this.hass.localize(\n                    \"ui.panel.config.zwave_js.heal_network.traffic_warning\"\n                  )}\n                </em>\n              </p>\n              <mwc-button slot=\"primaryAction\" @click=${this._startHeal}>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.heal_network.start_heal\"\n                )}\n              </mwc-button>\n            `\n          : ``}\n        ${this._status === \"started\"\n          ? html`\n              <div class=\"status\">\n                <p>\n                  <b>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.heal_network.in_progress\"\n                    )}\n                  </b>\n                </p>\n                <p>\n                  ${this.hass.localize(\n                    \"ui.panel.config.zwave_js.heal_network.run_in_background\"\n                  )}\n                </p>\n              </div>\n              ${!this._progress_total\n                ? html`\n                    <mwc-linear-progress indeterminate> </mwc-linear-progress>\n                  `\n                : \"\"}\n              <mwc-button slot=\"secondaryAction\" @click=${this._stopHeal}>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.heal_network.stop_heal\"\n                )}\n              </mwc-button>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.panel.config.zwave_js.common.close\")}\n              </mwc-button>\n            `\n          : ``}\n        ${this._status === \"failed\"\n          ? html`\n              <div class=\"flex-container\">\n                <ha-svg-icon\n                  .path=${mdiCloseCircle}\n                  class=\"failed\"\n                ></ha-svg-icon>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.heal_network.healing_failed\"\n                    )}\n                  </p>\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.panel.config.zwave_js.common.close\")}\n              </mwc-button>\n            `\n          : ``}\n        ${this._status === \"finished\"\n          ? html`\n              <div class=\"flex-container\">\n                <ha-svg-icon\n                  .path=${mdiCheckCircle}\n                  class=\"success\"\n                ></ha-svg-icon>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.heal_network.healing_complete\"\n                    )}\n                  </p>\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.panel.config.zwave_js.common.close\")}\n              </mwc-button>\n            `\n          : ``}\n        ${this._status === \"cancelled\"\n          ? html`\n              <div class=\"flex-container\">\n                <ha-svg-icon\n                  .path=${mdiCloseCircle}\n                  class=\"failed\"\n                ></ha-svg-icon>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.heal_network.healing_cancelled\"\n                    )}\n                  </p>\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.panel.config.zwave_js.common.close\")}\n              </mwc-button>\n            `\n          : ``}\n        ${this._progress_total && this._status !== \"finished\"\n          ? html`\n              <mwc-linear-progress\n                determinate\n                .progress=${this._progress_finished}\n                .buffer=${this._progress_in_progress}\n              >\n              </mwc-linear-progress>\n            `\n          : \"\"}\n      </ha-dialog>\n    `;\n  }\n\n  private async _fetchData(): Promise<void> {\n    if (!this.hass) {\n      return;\n    }\n    const network: ZWaveJSNetwork = await fetchNetworkStatus(\n      this.hass!,\n      this.entry_id!\n    );\n    if (network.controller.is_heal_network_active) {\n      this._status = \"started\";\n      this._subscribed = subscribeHealNetworkProgress(\n        this.hass,\n        this.entry_id!,\n        this._handleMessage.bind(this)\n      );\n    }\n  }\n\n  private _startHeal(): void {\n    if (!this.hass) {\n      return;\n    }\n    healNetwork(this.hass, this.entry_id!);\n    this._status = \"started\";\n    this._subscribed = subscribeHealNetworkProgress(\n      this.hass,\n      this.entry_id!,\n      this._handleMessage.bind(this)\n    );\n  }\n\n  private _stopHeal(): void {\n    if (!this.hass) {\n      return;\n    }\n    stopHealNetwork(this.hass, this.entry_id!);\n    this._unsubscribe();\n    this._status = \"cancelled\";\n  }\n\n  private _handleMessage(message: ZWaveJSHealNetworkStatusMessage): void {\n    if (message.event === \"heal network progress\") {\n      let finished = 0;\n      let in_progress = 0;\n      for (const status of Object.values(message.heal_node_status)) {\n        if (status === \"pending\") {\n          in_progress++;\n        }\n        if ([\"skipped\", \"failed\", \"done\"].includes(status)) {\n          finished++;\n        }\n      }\n      this._progress_total = Object.keys(message.heal_node_status).length;\n      this._progress_finished = finished / this._progress_total;\n      this._progress_in_progress = in_progress / this._progress_total;\n    }\n    if (message.event === \"heal network done\") {\n      this._unsubscribe();\n      this._status = \"finished\";\n    }\n  }\n\n  private _unsubscribe(): void {\n    if (this._subscribed) {\n      this._subscribed.then((unsub) => unsub());\n      this._subscribed = undefined;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        .success {\n          color: var(--success-color);\n        }\n\n        .failed {\n          color: var(--error-color);\n        }\n\n        .flex-container {\n          display: flex;\n          align-items: center;\n        }\n\n        ha-svg-icon {\n          width: 68px;\n          height: 48px;\n        }\n\n        ha-svg-icon.introduction {\n          color: var(--primary-color);\n        }\n\n        .flex-container ha-svg-icon {\n          margin-right: 20px;\n        }\n\n        mwc-linear-progress {\n          margin-top: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-zwave_js-heal-network\": DialogZWaveJSHealNetwork;\n  }\n}\n"],"names":[],"sourceRoot":""}