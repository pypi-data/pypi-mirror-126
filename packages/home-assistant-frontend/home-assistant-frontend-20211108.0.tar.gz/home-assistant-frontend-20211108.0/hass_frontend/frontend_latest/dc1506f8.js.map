{"version":3,"file":"dc1506f8.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpOA;AAoEA;;AApEA;;ACiHA;AACA;;AAKA;;AAQA;AACA;AACA;AACA;;AAEA;;;;;AAKA;AACA;AACA;;;;AAIA;;AAGA;;;;;AAMA;AACA;AAIA;;;AAGA;;;;;AAKA;;AAIA;;;;;AAOA;AAGA;;AAKA;AACA;;;AAGA;;;;AAIA;;AAIA;;;;;;AAQA;;AAGA;AAGA;;;AAOA;;;AAOA;;;AAGA;;;;;AAKA;;AAGA;;;;AAOA;;AAKA;;;;AAMA;;;AAIA;;AAGA;AAGA;;;AAOA;;;AAOA;;;AAGA;;;;;AAKA;;AAGA;;;;AAOA;;AAKA;;;;AAMA;AAEA;;AAGA;AAGA;;AAMA;;;;AAIA;;;;;AAKA;;AAKA;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AArTA;;ACgGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AASA;;AAEA;;;;AAIA;;AAIA;;;;;AA9HA;AAmJA;;AAEA;;;AAGA;;AAxJA;;;;;AAAA;;ACpBA;;;;AAMA;;;;;;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/paper-tooltip/paper-tooltip.js","webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/panels/config/areas/ha-config-area-page.ts","webpack://home-assistant-frontend/./src/panels/config/areas/ha-config-areas-dashboard.ts","webpack://home-assistant-frontend/./src/panels/config/ha-config-section.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\nMaterial design:\n[Tooltips](https://www.google.com/design/spec/components/tooltips.html)\n`<paper-tooltip>` is a label that appears on hover and focus when the user\nhovers over an element with the cursor or with the keyboard. It will be centered\nto an anchor element specified in the `for` attribute, or, if that doesn't\nexist, centered to the parent node containing it.\nExample:\n    <div style=\"display:inline-block\">\n      <button>Click me!</button>\n      <paper-tooltip>Tooltip text</paper-tooltip>\n    </div>\n    <div>\n      <button id=\"btn\">Click me!</button>\n      <paper-tooltip for=\"btn\">Tooltip text</paper-tooltip>\n    </div>\nThe tooltip can be positioned on the top|bottom|left|right of the anchor using\nthe `position` attribute. The default position is bottom.\n    <paper-tooltip for=\"btn\" position=\"left\">Tooltip text</paper-tooltip>\n    <paper-tooltip for=\"btn\" position=\"top\">Tooltip text</paper-tooltip>\n\n### Styling\nThe following custom properties and mixins are available for styling:\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-tooltip-background` | The background color of the tooltip | `#616161`\n`--paper-tooltip-opacity` | The opacity of the tooltip | `0.9`\n`--paper-tooltip-text-color` | The text color of the tooltip | `white`\n`--paper-tooltip` | Mixin applied to the tooltip | `{}`\n`--paper-tooltip-delay-in` | Delay before tooltip starts to fade in | `500`\n`--paper-tooltip-delay-out` | Delay before tooltip starts to fade out | `0`\n`--paper-tooltip-duration-in` | Timing for animation when showing tooltip | `500`\n`--paper-tooltip-duration-out` | Timing for animation when hiding tooltip | `0`\n`--paper-tooltip-animation` | Mixin applied to the tooltip animation | `{}`\n@group Paper Elements\n@element paper-tooltip\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        position: absolute;\n        outline: none;\n        z-index: 1002;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        -webkit-user-select: none;\n        user-select: none;\n        cursor: default;\n      }\n\n      #tooltip {\n        display: block;\n        outline: none;\n        @apply --paper-font-common-base;\n        font-size: 10px;\n        line-height: 1;\n        background-color: var(--paper-tooltip-background, #616161);\n        color: var(--paper-tooltip-text-color, white);\n        padding: 8px;\n        border-radius: 2px;\n        @apply --paper-tooltip;\n      }\n\n      @keyframes keyFrameScaleUp {\n        0% {\n          transform: scale(0.0);\n        }\n        100% {\n          transform: scale(1.0);\n        }\n      }\n\n      @keyframes keyFrameScaleDown {\n        0% {\n          transform: scale(1.0);\n        }\n        100% {\n          transform: scale(0.0);\n        }\n      }\n\n      @keyframes keyFrameFadeInOpacity {\n        0% {\n          opacity: 0;\n        }\n        100% {\n          opacity: var(--paper-tooltip-opacity, 0.9);\n        }\n      }\n\n      @keyframes keyFrameFadeOutOpacity {\n        0% {\n          opacity: var(--paper-tooltip-opacity, 0.9);\n        }\n        100% {\n          opacity: 0;\n        }\n      }\n\n      @keyframes keyFrameSlideDownIn {\n        0% {\n          transform: translateY(-2000px);\n          opacity: 0;\n        }\n        10% {\n          opacity: 0.2;\n        }\n        100% {\n          transform: translateY(0);\n          opacity: var(--paper-tooltip-opacity, 0.9);\n        }\n      }\n\n      @keyframes keyFrameSlideDownOut {\n        0% {\n          transform: translateY(0);\n          opacity: var(--paper-tooltip-opacity, 0.9);\n        }\n        10% {\n          opacity: 0.2;\n        }\n        100% {\n          transform: translateY(-2000px);\n          opacity: 0;\n        }\n      }\n\n      .fade-in-animation {\n        opacity: 0;\n        animation-delay: var(--paper-tooltip-delay-in, 500ms);\n        animation-name: keyFrameFadeInOpacity;\n        animation-iteration-count: 1;\n        animation-timing-function: ease-in;\n        animation-duration: var(--paper-tooltip-duration-in, 500ms);\n        animation-fill-mode: forwards;\n        @apply --paper-tooltip-animation;\n      }\n\n      .fade-out-animation {\n        opacity: var(--paper-tooltip-opacity, 0.9);\n        animation-delay: var(--paper-tooltip-delay-out, 0ms);\n        animation-name: keyFrameFadeOutOpacity;\n        animation-iteration-count: 1;\n        animation-timing-function: ease-in;\n        animation-duration: var(--paper-tooltip-duration-out, 500ms);\n        animation-fill-mode: forwards;\n        @apply --paper-tooltip-animation;\n      }\n\n      .scale-up-animation {\n        transform: scale(0);\n        opacity: var(--paper-tooltip-opacity, 0.9);\n        animation-delay: var(--paper-tooltip-delay-in, 500ms);\n        animation-name: keyFrameScaleUp;\n        animation-iteration-count: 1;\n        animation-timing-function: ease-in;\n        animation-duration: var(--paper-tooltip-duration-in, 500ms);\n        animation-fill-mode: forwards;\n        @apply --paper-tooltip-animation;\n      }\n\n      .scale-down-animation {\n        transform: scale(1);\n        opacity: var(--paper-tooltip-opacity, 0.9);\n        animation-delay: var(--paper-tooltip-delay-out, 500ms);\n        animation-name: keyFrameScaleDown;\n        animation-iteration-count: 1;\n        animation-timing-function: ease-in;\n        animation-duration: var(--paper-tooltip-duration-out, 500ms);\n        animation-fill-mode: forwards;\n        @apply --paper-tooltip-animation;\n      }\n\n      .slide-down-animation {\n        transform: translateY(-2000px);\n        opacity: 0;\n        animation-delay: var(--paper-tooltip-delay-out, 500ms);\n        animation-name: keyFrameSlideDownIn;\n        animation-iteration-count: 1;\n        animation-timing-function: cubic-bezier(0.0, 0.0, 0.2, 1);\n        animation-duration: var(--paper-tooltip-duration-out, 500ms);\n        animation-fill-mode: forwards;\n        @apply --paper-tooltip-animation;\n      }\n\n      .slide-down-animation-out {\n        transform: translateY(0);\n        opacity: var(--paper-tooltip-opacity, 0.9);\n        animation-delay: var(--paper-tooltip-delay-out, 500ms);\n        animation-name: keyFrameSlideDownOut;\n        animation-iteration-count: 1;\n        animation-timing-function: cubic-bezier(0.4, 0.0, 1, 1);\n        animation-duration: var(--paper-tooltip-duration-out, 500ms);\n        animation-fill-mode: forwards;\n        @apply --paper-tooltip-animation;\n      }\n\n      .cancel-animation {\n        animation-delay: -30s !important;\n      }\n\n      /* Thanks IE 10. */\n\n      .hidden {\n        display: none !important;\n      }\n    </style>\n\n    <div id=\"tooltip\" class=\"hidden\">\n      <slot></slot>\n    </div>\n`,\n\n  is: 'paper-tooltip',\n  hostAttributes: {role: 'tooltip', tabindex: -1},\n\n  properties: {\n    /**\n     * The id of the element that the tooltip is anchored to. This element\n     * must be a sibling of the tooltip. If this property is not set,\n     * then the tooltip will be centered to the parent node containing it.\n     */\n    for: {type: String, observer: '_findTarget'},\n    /**\n     * Set this to true if you want to manually control when the tooltip\n     * is shown or hidden.\n     */\n    manualMode: {type: Boolean, value: false, observer: '_manualModeChanged'},\n    /**\n     * Positions the tooltip to the top, right, bottom, left of its content.\n     */\n    position: {type: String, value: 'bottom'},\n    /**\n     * If true, no parts of the tooltip will ever be shown offscreen.\n     */\n    fitToVisibleBounds: {type: Boolean, value: false},\n    /**\n     * The spacing between the top of the tooltip and the element it is\n     * anchored to.\n     */\n    offset: {type: Number, value: 14},\n    /**\n     * This property is deprecated, but left over so that it doesn't\n     * break exiting code. Please use `offset` instead. If both `offset` and\n     * `marginTop` are provided, `marginTop` will be ignored.\n     * @deprecated since version 1.0.3\n     */\n    marginTop: {type: Number, value: 14},\n    /**\n     * The delay that will be applied before the `entry` animation is\n     * played when showing the tooltip.\n     */\n    animationDelay: {type: Number, value: 500, observer: '_delayChange'},\n    /**\n     * The animation that will be played on entry.  This replaces the\n     * deprecated animationConfig.  Entries here will override the\n     * animationConfig settings.  You can enter your own animation\n     * by setting it to the css class name.\n     */\n    animationEntry: {type: String, value: ''},\n    /**\n     * The animation that will be played on exit.  This replaces the\n     * deprecated animationConfig.  Entries here will override the\n     * animationConfig settings.  You can enter your own animation\n     * by setting it to the css class name.\n     */\n    animationExit: {type: String, value: ''},\n    /**\n     * This property is deprecated.  Use --paper-tooltip-animation to change the\n     * animation. The entry and exit animations that will be played when showing\n     * and hiding the tooltip. If you want to override this, you must ensure\n     * that your animationConfig has the exact format below.\n     * @deprecated since version\n     *\n     * The entry and exit animations that will be played when showing and\n     * hiding the tooltip. If you want to override this, you must ensure\n     * that your animationConfig has the exact format below.\n     */\n    animationConfig: {\n      type: Object,\n      value: function() {\n        return {\n          'entry':\n              [{name: 'fade-in-animation', node: this, timing: {delay: 0}}],\n              'exit': [{name: 'fade-out-animation', node: this}]\n        }\n      }\n    },\n    _showing: {type: Boolean, value: false}\n  },\n\n  listeners: {\n    'webkitAnimationEnd': '_onAnimationEnd',\n  },\n\n  /**\n   * Returns the target element that this tooltip is anchored to. It is\n   * either the element given by the `for` attribute, or the immediate parent\n   * of the tooltip.\n   *\n   * @type {Node}\n   */\n  get target() {\n    var parentNode = dom(this).parentNode;\n    // If the parentNode is a document fragment, then we need to use the host.\n    var ownerRoot = dom(this).getOwnerRoot();\n    var target;\n    if (this.for) {\n      target = dom(ownerRoot).querySelector('#' + this.for);\n    } else {\n      target = parentNode.nodeType == Node.DOCUMENT_FRAGMENT_NODE ?\n          ownerRoot.host :\n          parentNode;\n    }\n    return target;\n  },\n\n  /**\n   * @return {void}\n   */\n  attached: function() {\n    this._findTarget();\n  },\n\n  /**\n   * @return {void}\n   */\n  detached: function() {\n    if (!this.manualMode)\n      this._removeListeners();\n  },\n\n  /**\n   * Replaces Neon-Animation playAnimation - just calls show and hide.\n   * @deprecated Use show and hide instead.\n   * @param {string} type Either `entry` or `exit`\n   */\n  playAnimation: function(type) {\n    if (type === 'entry') {\n      this.show();\n    } else if (type === 'exit') {\n      this.hide();\n    }\n  },\n\n  /**\n   * Cancels the animation and either fully shows or fully hides tooltip\n   */\n  cancelAnimation: function() {\n    // Short-cut and cancel all animations and hide\n    this.$.tooltip.classList.add('cancel-animation');\n  },\n\n  /**\n   * Shows the tooltip programatically\n   * @return {void}\n   */\n  show: function() {\n    // If the tooltip is already showing, there's nothing to do.\n    if (this._showing)\n      return;\n\n    if (dom(this).textContent.trim() === '') {\n      // Check if effective children are also empty\n      var allChildrenEmpty = true;\n      var effectiveChildren = dom(this).getEffectiveChildNodes();\n      for (var i = 0; i < effectiveChildren.length; i++) {\n        if (effectiveChildren[i].textContent.trim() !== '') {\n          allChildrenEmpty = false;\n          break;\n        }\n      }\n      if (allChildrenEmpty) {\n        return;\n      }\n    }\n\n    this._showing = true;\n    this.$.tooltip.classList.remove('hidden');\n    this.$.tooltip.classList.remove('cancel-animation');\n    this.$.tooltip.classList.remove(this._getAnimationType('exit'));\n    this.updatePosition();\n    this._animationPlaying = true;\n    this.$.tooltip.classList.add(this._getAnimationType('entry'));\n  },\n\n  /**\n   * Hides the tooltip programatically\n   * @return {void}\n   */\n  hide: function() {\n    // If the tooltip is already hidden, there's nothing to do.\n    if (!this._showing) {\n      return;\n    }\n\n    // If the entry animation is still playing, don't try to play the exit\n    // animation since this will reset the opacity to 1. Just end the animation.\n    if (this._animationPlaying) {\n      this._showing = false;\n      this._cancelAnimation();\n      return;\n    } else {\n      // Play Exit Animation\n      this._onAnimationFinish();\n    }\n\n    this._showing = false;\n    this._animationPlaying = true;\n  },\n\n  /**\n   * @return {void}\n   */\n  updatePosition: function() {\n    if (!this._target || !this.offsetParent)\n      return;\n    var offset = this.offset;\n    // If a marginTop has been provided by the user (pre 1.0.3), use it.\n    if (this.marginTop != 14 && this.offset == 14)\n      offset = this.marginTop;\n    var parentRect = this.offsetParent.getBoundingClientRect();\n    var targetRect = this._target.getBoundingClientRect();\n    var thisRect = this.getBoundingClientRect();\n    var horizontalCenterOffset = (targetRect.width - thisRect.width) / 2;\n    var verticalCenterOffset = (targetRect.height - thisRect.height) / 2;\n    var targetLeft = targetRect.left - parentRect.left;\n    var targetTop = targetRect.top - parentRect.top;\n    var tooltipLeft, tooltipTop;\n    switch (this.position) {\n      case 'top':\n        tooltipLeft = targetLeft + horizontalCenterOffset;\n        tooltipTop = targetTop - thisRect.height - offset;\n        break;\n      case 'bottom':\n        tooltipLeft = targetLeft + horizontalCenterOffset;\n        tooltipTop = targetTop + targetRect.height + offset;\n        break;\n      case 'left':\n        tooltipLeft = targetLeft - thisRect.width - offset;\n        tooltipTop = targetTop + verticalCenterOffset;\n        break;\n      case 'right':\n        tooltipLeft = targetLeft + targetRect.width + offset;\n        tooltipTop = targetTop + verticalCenterOffset;\n        break;\n    }\n    // TODO(noms): This should use IronFitBehavior if possible.\n    if (this.fitToVisibleBounds) {\n      // Clip the left/right side\n      if (parentRect.left + tooltipLeft + thisRect.width > window.innerWidth) {\n        this.style.right = '0px';\n        this.style.left = 'auto';\n      } else {\n        this.style.left = Math.max(0, tooltipLeft) + 'px';\n        this.style.right = 'auto';\n      }\n      // Clip the top/bottom side.\n      if (parentRect.top + tooltipTop + thisRect.height > window.innerHeight) {\n        this.style.bottom = (parentRect.height - targetTop + offset) + 'px';\n        this.style.top = 'auto';\n      } else {\n        this.style.top = Math.max(-parentRect.top, tooltipTop) + 'px';\n        this.style.bottom = 'auto';\n      }\n    } else {\n      this.style.left = tooltipLeft + 'px';\n      this.style.top = tooltipTop + 'px';\n    }\n  },\n\n  _addListeners: function() {\n    if (this._target) {\n      this.listen(this._target, 'mouseenter', 'show');\n      this.listen(this._target, 'focus', 'show');\n      this.listen(this._target, 'mouseleave', 'hide');\n      this.listen(this._target, 'blur', 'hide');\n      this.listen(this._target, 'tap', 'hide');\n    }\n    this.listen(this.$.tooltip, 'animationend', '_onAnimationEnd');\n    this.listen(this, 'mouseenter', 'hide');\n  },\n\n  _findTarget: function() {\n    if (!this.manualMode)\n      this._removeListeners();\n    this._target = this.target;\n    if (!this.manualMode)\n      this._addListeners();\n  },\n\n  _delayChange: function(newValue) {\n    // Only Update delay if different value set\n    if (newValue !== 500) {\n      this.updateStyles({'--paper-tooltip-delay-in': newValue + 'ms'});\n    }\n  },\n\n  _manualModeChanged: function() {\n    if (this.manualMode)\n      this._removeListeners();\n    else\n      this._addListeners();\n  },\n\n  _cancelAnimation: function() {\n    // Short-cut and cancel all animations and hide\n    this.$.tooltip.classList.remove(this._getAnimationType('entry'));\n    this.$.tooltip.classList.remove(this._getAnimationType('exit'));\n    this.$.tooltip.classList.remove('cancel-animation');\n    this.$.tooltip.classList.add('hidden');\n  },\n\n  _onAnimationFinish: function() {\n    if (this._showing) {\n      this.$.tooltip.classList.remove(this._getAnimationType('entry'));\n      this.$.tooltip.classList.remove('cancel-animation');\n      this.$.tooltip.classList.add(this._getAnimationType('exit'));\n    }\n  },\n\n  _onAnimationEnd: function() {\n    // If no longer showing add class hidden to completely hide tooltip\n    this._animationPlaying = false;\n    if (!this._showing) {\n      this.$.tooltip.classList.remove(this._getAnimationType('exit'));\n      this.$.tooltip.classList.add('hidden');\n    }\n  },\n\n  _getAnimationType: function(type) {\n    // These properties have priority over animationConfig values\n    if ((type === 'entry') && (this.animationEntry !== '')) {\n      return this.animationEntry;\n    }\n    if ((type === 'exit') && (this.animationExit !== '')) {\n      return this.animationExit;\n    }\n    // If no results then return the legacy value from animationConfig\n    if (this.animationConfig[type] &&\n        typeof this.animationConfig[type][0].name === 'string') {\n      // Checking Timing and Update if necessary - Legacy for animationConfig\n      if (this.animationConfig[type][0].timing &&\n          this.animationConfig[type][0].timing.delay &&\n          this.animationConfig[type][0].timing.delay !== 0) {\n        var timingDelay = this.animationConfig[type][0].timing.delay;\n        // Has Timing Change - Update CSS\n        if (type === 'entry') {\n          this.updateStyles({'--paper-tooltip-delay-in': timingDelay + 'ms'});\n        } else if (type === 'exit') {\n          this.updateStyles({'--paper-tooltip-delay-out': timingDelay + 'ms'});\n        }\n      }\n      return this.animationConfig[type][0].name;\n    }\n  },\n\n  _removeListeners: function() {\n    if (this._target) {\n      this.unlisten(this._target, 'mouseenter', 'show');\n      this.unlisten(this._target, 'focus', 'show');\n      this.unlisten(this._target, 'mouseleave', 'hide');\n      this.unlisten(this._target, 'blur', 'hide');\n      this.unlisten(this._target, 'tap', 'hide');\n    }\n    this.unlisten(this.$.tooltip, 'animationend', '_onAnimationEnd');\n    this.unlisten(this, 'mouseenter', 'hide');\n  }\n});\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import \"@material/mwc-button\";\nimport { mdiCog } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport {\n  AreaRegistryEntry,\n  deleteAreaRegistryEntry,\n  updateAreaRegistryEntry,\n} from \"../../../data/area_registry\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n} from \"../../../data/device_registry\";\nimport {\n  computeEntityRegistryName,\n  EntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport { findRelated, RelatedResult } from \"../../../data/search\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { showEntityEditorDialog } from \"../entities/show-dialog-entity-editor\";\nimport { configSections } from \"../ha-panel-config\";\nimport {\n  loadAreaRegistryDetailDialog,\n  showAreaRegistryDetailDialog,\n} from \"./show-dialog-area-registry-detail\";\n\n@customElement(\"ha-config-area-page\")\nclass HaConfigAreaPage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public areaId!: string;\n\n  @property() public areas!: AreaRegistryEntry[];\n\n  @property() public devices!: DeviceRegistryEntry[];\n\n  @property() public entities!: EntityRegistryEntry[];\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property() public isWide!: boolean;\n\n  @property() public showAdvanced!: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _related?: RelatedResult;\n\n  private _area = memoizeOne(\n    (\n      areaId: string,\n      areas: AreaRegistryEntry[]\n    ): AreaRegistryEntry | undefined =>\n      areas.find((area) => area.area_id === areaId)\n  );\n\n  private _memberships = memoizeOne(\n    (\n      areaId: string,\n      registryDevices: DeviceRegistryEntry[],\n      registryEntities: EntityRegistryEntry[]\n    ) => {\n      const devices = new Map();\n\n      for (const device of registryDevices) {\n        if (device.area_id === areaId) {\n          devices.set(device.id, device);\n        }\n      }\n\n      const entities: EntityRegistryEntry[] = [];\n      const indirectEntities: EntityRegistryEntry[] = [];\n\n      for (const entity of registryEntities) {\n        if (entity.area_id) {\n          if (entity.area_id === areaId) {\n            entities.push(entity);\n          }\n        } else if (devices.has(entity.device_id)) {\n          indirectEntities.push(entity);\n        }\n      }\n\n      return {\n        devices: Array.from(devices.values()),\n        entities,\n        indirectEntities,\n      };\n    }\n  );\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    loadAreaRegistryDetailDialog();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"areaId\")) {\n      this._findRelated();\n    }\n  }\n\n  protected render(): TemplateResult {\n    const area = this._area(this.areaId, this.areas);\n\n    if (!area) {\n      return html`\n        <hass-error-screen\n          .hass=${this.hass}\n          .error=${this.hass.localize(\"ui.panel.config.areas.area_not_found\")}\n        ></hass-error-screen>\n      `;\n    }\n\n    const { devices, entities } = this._memberships(\n      this.areaId,\n      this.devices,\n      this.entities\n    );\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .tabs=${configSections.integrations}\n        .route=${this.route}\n      >\n        ${this.narrow ? html` <span slot=\"header\"> ${area.name} </span> ` : \"\"}\n\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          .path=${mdiCog}\n          .entry=${area}\n          @click=${this._showSettings}\n          .label=${this.hass.localize(\"ui.panel.config.areas.edit_settings\")}\n        ></ha-icon-button>\n\n        <div class=\"container\">\n          ${!this.narrow\n            ? html`\n                <div class=\"fullwidth\">\n                  <h1>${area.name}</h1>\n                </div>\n              `\n            : \"\"}\n          <div class=\"column\">\n            <ha-card\n              .header=${this.hass.localize(\"ui.panel.config.devices.caption\")}\n              >${devices.length\n                ? devices.map(\n                    (device) =>\n                      html`\n                        <a href=\"/config/devices/device/${device.id}\">\n                          <paper-item>\n                            <paper-item-body>\n                              ${computeDeviceName(device, this.hass)}\n                            </paper-item-body>\n                            <ha-icon-next></ha-icon-next>\n                          </paper-item>\n                        </a>\n                      `\n                  )\n                : html`\n                    <paper-item class=\"no-link\"\n                      >${this.hass.localize(\n                        \"ui.panel.config.devices.no_devices\"\n                      )}</paper-item\n                    >\n                  `}\n            </ha-card>\n            <ha-card\n              .header=${this.hass.localize(\n                \"ui.panel.config.areas.editor.linked_entities_caption\"\n              )}\n              >${entities.length\n                ? entities.map(\n                    (entity) =>\n                      html`\n                        <paper-item\n                          @click=${this._openEntity}\n                          .entity=${entity}\n                        >\n                          <paper-item-body>\n                            ${computeEntityRegistryName(this.hass, entity)}\n                          </paper-item-body>\n                          <ha-icon-next></ha-icon-next>\n                        </paper-item>\n                      `\n                  )\n                : html`\n                    <paper-item class=\"no-link\"\n                      >${this.hass.localize(\n                        \"ui.panel.config.areas.editor.no_linked_entities\"\n                      )}</paper-item\n                    >\n                  `}\n            </ha-card>\n          </div>\n          <div class=\"column\">\n            ${isComponentLoaded(this.hass, \"automation\")\n              ? html`\n                  <ha-card\n                    .header=${this.hass.localize(\n                      \"ui.panel.config.devices.automation.automations\"\n                    )}\n                    >${this._related?.automation?.length\n                      ? this._related.automation.map((automation) => {\n                          const entityState = this.hass.states[automation];\n                          return entityState\n                            ? html`\n                                <div>\n                                  <a\n                                    href=${ifDefined(\n                                      entityState.attributes.id\n                                        ? `/config/automation/edit/${entityState.attributes.id}`\n                                        : undefined\n                                    )}\n                                  >\n                                    <paper-item\n                                      .disabled=${!entityState.attributes.id}\n                                    >\n                                      <paper-item-body>\n                                        ${computeStateName(entityState)}\n                                      </paper-item-body>\n                                      <ha-icon-next></ha-icon-next>\n                                    </paper-item>\n                                  </a>\n                                  ${!entityState.attributes.id\n                                    ? html`\n                                        <paper-tooltip animation-delay=\"0\">\n                                          ${this.hass.localize(\n                                            \"ui.panel.config.devices.cant_edit\"\n                                          )}\n                                        </paper-tooltip>\n                                      `\n                                    : \"\"}\n                                </div>\n                              `\n                            : \"\";\n                        })\n                      : html`\n                          <paper-item class=\"no-link\"\n                            >${this.hass.localize(\n                              \"ui.panel.config.devices.automation.no_automations\"\n                            )}</paper-item\n                          >\n                        `}\n                  </ha-card>\n                `\n              : \"\"}\n          </div>\n          <div class=\"column\">\n            ${isComponentLoaded(this.hass, \"scene\")\n              ? html`\n                  <ha-card\n                    .header=${this.hass.localize(\n                      \"ui.panel.config.devices.scene.scenes\"\n                    )}\n                    >${this._related?.scene?.length\n                      ? this._related.scene.map((scene) => {\n                          const entityState = this.hass.states[scene];\n                          return entityState\n                            ? html`\n                                <div>\n                                  <a\n                                    href=${ifDefined(\n                                      entityState.attributes.id\n                                        ? `/config/scene/edit/${entityState.attributes.id}`\n                                        : undefined\n                                    )}\n                                  >\n                                    <paper-item\n                                      .disabled=${!entityState.attributes.id}\n                                    >\n                                      <paper-item-body>\n                                        ${computeStateName(entityState)}\n                                      </paper-item-body>\n                                      <ha-icon-next></ha-icon-next>\n                                    </paper-item>\n                                  </a>\n                                  ${!entityState.attributes.id\n                                    ? html`\n                                        <paper-tooltip animation-delay=\"0\">\n                                          ${this.hass.localize(\n                                            \"ui.panel.config.devices.cant_edit\"\n                                          )}\n                                        </paper-tooltip>\n                                      `\n                                    : \"\"}\n                                </div>\n                              `\n                            : \"\";\n                        })\n                      : html`\n                          <paper-item class=\"no-link\"\n                            >${this.hass.localize(\n                              \"ui.panel.config.devices.scene.no_scenes\"\n                            )}</paper-item\n                          >\n                        `}\n                  </ha-card>\n                `\n              : \"\"}\n            ${isComponentLoaded(this.hass, \"script\")\n              ? html`\n                  <ha-card\n                    .header=${this.hass.localize(\n                      \"ui.panel.config.devices.script.scripts\"\n                    )}\n                    >${this._related?.script?.length\n                      ? this._related.script.map((script) => {\n                          const entityState = this.hass.states[script];\n                          return entityState\n                            ? html`\n                                <a\n                                  href=${`/config/script/edit/${entityState.entity_id}`}\n                                >\n                                  <paper-item>\n                                    <paper-item-body>\n                                      ${computeStateName(entityState)}\n                                    </paper-item-body>\n                                    <ha-icon-next></ha-icon-next>\n                                  </paper-item>\n                                </a>\n                              `\n                            : \"\";\n                        })\n                      : html`\n                          <paper-item class=\"no-link\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.devices.script.no_scripts\"\n                            )}</paper-item\n                          >\n                        `}\n                  </ha-card>\n                `\n              : \"\"}\n          </div>\n        </div>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private async _findRelated() {\n    this._related = await findRelated(this.hass, \"area\", this.areaId);\n  }\n\n  private _showSettings(ev: MouseEvent) {\n    const entry: AreaRegistryEntry = (ev.currentTarget! as any).entry;\n    this._openDialog(entry);\n  }\n\n  private _openEntity(ev) {\n    const entry: EntityRegistryEntry = (ev.currentTarget as any).entity;\n    showEntityEditorDialog(this, {\n      entity_id: entry.entity_id,\n      entry,\n    });\n  }\n\n  private _openDialog(entry?: AreaRegistryEntry) {\n    showAreaRegistryDetailDialog(this, {\n      entry,\n      updateEntry: async (values) =>\n        updateAreaRegistryEntry(this.hass!, entry!.area_id, values),\n      removeEntry: async () => {\n        if (\n          !(await showConfirmationDialog(this, {\n            title: this.hass.localize(\n              \"ui.panel.config.areas.delete.confirmation_title\"\n            ),\n            text: this.hass.localize(\n              \"ui.panel.config.areas.delete.confirmation_text\"\n            ),\n            dismissText: this.hass.localize(\"ui.common.cancel\"),\n            confirmText: this.hass.localize(\"ui.common.delete\"),\n          }))\n        ) {\n          return false;\n        }\n\n        try {\n          await deleteAreaRegistryEntry(this.hass!, entry!.area_id);\n          return true;\n        } catch (err: any) {\n          return false;\n        }\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        h1 {\n          margin-top: 0;\n          font-family: var(--paper-font-headline_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-headline_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-headline_-_font-size);\n          font-weight: var(--paper-font-headline_-_font-weight);\n          letter-spacing: var(--paper-font-headline_-_letter-spacing);\n          line-height: var(--paper-font-headline_-_line-height);\n          opacity: var(--dark-primary-opacity);\n        }\n\n        .container {\n          display: flex;\n          flex-wrap: wrap;\n          margin: auto;\n          max-width: 1000px;\n          margin-top: 32px;\n          margin-bottom: 32px;\n        }\n        .column {\n          padding: 8px;\n          box-sizing: border-box;\n          width: 33%;\n          flex-grow: 1;\n        }\n        .fullwidth {\n          padding: 8px;\n          width: 100%;\n        }\n        .column > *:not(:first-child) {\n          margin-top: 16px;\n        }\n\n        :host([narrow]) .column {\n          width: 100%;\n        }\n\n        :host([narrow]) .container {\n          margin-top: 0;\n        }\n\n        paper-item {\n          cursor: pointer;\n          font-size: var(--paper-font-body1_-_font-size);\n        }\n\n        a {\n          text-decoration: none;\n          color: var(--primary-text-color);\n        }\n\n        paper-item.no-link {\n          cursor: default;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-area-page\": HaConfigAreaPage;\n  }\n}\n","import { mdiHelpCircle, mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { HASSDomEvent } from \"../../../common/dom/fire_event\";\nimport { navigate } from \"../../../common/navigate\";\nimport {\n  DataTableColumnContainer,\n  RowClickedEvent,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport {\n  AreaRegistryEntry,\n  createAreaRegistryEntry,\n} from \"../../../data/area_registry\";\nimport type { DeviceRegistryEntry } from \"../../../data/device_registry\";\nimport type { EntityRegistryEntry } from \"../../../data/entity_registry\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\nimport {\n  loadAreaRegistryDetailDialog,\n  showAreaRegistryDetailDialog,\n} from \"./show-dialog-area-registry-detail\";\n\n@customElement(\"ha-config-areas-dashboard\")\nexport class HaConfigAreasDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide?: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @property() public areas!: AreaRegistryEntry[];\n\n  @property() public devices!: DeviceRegistryEntry[];\n\n  @property() public entities!: EntityRegistryEntry[];\n\n  private _areas = memoizeOne(\n    (\n      areas: AreaRegistryEntry[],\n      devices: DeviceRegistryEntry[],\n      entities: EntityRegistryEntry[]\n    ) =>\n      areas.map((area) => {\n        const devicesInArea = new Set();\n\n        for (const device of devices) {\n          if (device.area_id === area.area_id) {\n            devicesInArea.add(device.id);\n          }\n        }\n\n        let entitiesInArea = 0;\n\n        for (const entity of entities) {\n          if (\n            entity.area_id\n              ? entity.area_id === area.area_id\n              : devicesInArea.has(entity.device_id)\n          ) {\n            entitiesInArea++;\n          }\n        }\n\n        return {\n          ...area,\n          devices: devicesInArea.size,\n          entities: entitiesInArea,\n        };\n      })\n  );\n\n  private _columns = memoizeOne(\n    (narrow: boolean): DataTableColumnContainer =>\n      narrow\n        ? {\n            name: {\n              title: this.hass.localize(\n                \"ui.panel.config.areas.data_table.area\"\n              ),\n              sortable: true,\n              filterable: true,\n              grows: true,\n              direction: \"asc\",\n            },\n          }\n        : {\n            name: {\n              title: this.hass.localize(\n                \"ui.panel.config.areas.data_table.area\"\n              ),\n              sortable: true,\n              filterable: true,\n              grows: true,\n              direction: \"asc\",\n            },\n            devices: {\n              title: this.hass.localize(\n                \"ui.panel.config.areas.data_table.devices\"\n              ),\n              sortable: true,\n              type: \"numeric\",\n              width: \"20%\",\n              direction: \"asc\",\n            },\n            entities: {\n              title: this.hass.localize(\n                \"ui.panel.config.areas.data_table.entities\"\n              ),\n              sortable: true,\n              type: \"numeric\",\n              width: \"20%\",\n              direction: \"asc\",\n            },\n          }\n  );\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .isWide=${this.isWide}\n        back-path=\"/config\"\n        .tabs=${configSections.integrations}\n        .route=${this.route}\n        .columns=${this._columns(this.narrow)}\n        .data=${this._areas(this.areas, this.devices, this.entities)}\n        @row-click=${this._handleRowClicked}\n        .noDataText=${this.hass.localize(\n          \"ui.panel.config.areas.picker.no_areas\"\n        )}\n        id=\"area_id\"\n        hasFab\n        clickable\n      >\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          .label=${this.hass.localize(\"ui.common.help\")}\n          .path=${mdiHelpCircle}\n          @click=${this._showHelp}\n        ></ha-icon-button>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.areas.picker.create_area\"\n          )}\n          extended\n          @click=${this._createArea}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    loadAreaRegistryDetailDialog();\n  }\n\n  private _createArea() {\n    this._openDialog();\n  }\n\n  private _showHelp() {\n    showAlertDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.areas.caption\"),\n      text: html`\n        ${this.hass.localize(\"ui.panel.config.areas.picker.introduction\")}\n        <p>\n          ${this.hass.localize(\"ui.panel.config.areas.picker.introduction2\")}\n        </p>\n        <a href=\"/config/integrations/dashboard\">\n          ${this.hass.localize(\n            \"ui.panel.config.areas.picker.integrations_page\"\n          )}\n        </a>\n      `,\n    });\n  }\n\n  private _handleRowClicked(ev: HASSDomEvent<RowClickedEvent>) {\n    const areaId = ev.detail.id;\n    navigate(`/config/areas/area/${areaId}`);\n  }\n\n  private _openDialog(entry?: AreaRegistryEntry) {\n    showAreaRegistryDetailDialog(this, {\n      entry,\n      createEntry: async (values) =>\n        createAreaRegistryEntry(this.hass!, values),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      hass-loading-screen {\n        --app-header-background-color: var(--sidebar-background-color);\n        --app-header-text-color: var(--sidebar-text-color);\n      }\n    `;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property() public isWide = false;\n\n  @property({ type: Boolean }) public vertical = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: this.vertical || !this.isWide,\n            horizontal: !this.vertical && this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n\n      .layout {\n        display: flex;\n      }\n\n      .horizontal {\n        flex-direction: row;\n      }\n\n      .vertical {\n        flex-direction: column;\n      }\n\n      .flex-auto {\n        flex: 1 1 auto;\n      }\n\n      .header {\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .together {\n        margin-top: 32px;\n      }\n\n      .intro {\n        font-family: var(--paper-font-subhead_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-subhead_-_-webkit-font-smoothing\n        );\n        font-weight: var(--paper-font-subhead_-_font-weight);\n        line-height: var(--paper-font-subhead_-_line-height);\n        width: 100%;\n        opacity: var(--dark-primary-opacity);\n        font-size: 14px;\n        padding-bottom: 20px;\n      }\n\n      .horizontal .intro {\n        max-width: 400px;\n        margin-right: 40px;\n      }\n\n      .panel {\n        margin-top: -24px;\n      }\n\n      .panel ::slotted(*) {\n        margin-top: 24px;\n        display: block;\n      }\n\n      .narrow.content {\n        max-width: 640px;\n      }\n      .narrow .together {\n        margin-top: 20px;\n      }\n      .narrow .intro {\n        padding-bottom: 20px;\n        margin-right: 0;\n        max-width: 500px;\n      }\n    `;\n  }\n}\n"],"names":[],"sourceRoot":""}