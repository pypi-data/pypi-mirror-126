/**

\page yarp_resource_finder_installation How to install files for the ResourceFinder

\tableofcontents

\section rf_install_intro Introduction

In previous tutorials (\ref yarp_resource_finder_basic and \ref yarp_resource_finder_advanced) we showed how you can employ the yarp::os::ResourceFinder to locate files on your machine. In those tutorials, the files were manually created inside the user's "local" directory; here, we show how to install those files within a project, so that you can provide default configuration files for modules or even complete applications.

\section rf_install_files Files to be installed

The module from \ref yarp_resource_finder_basic required the "robot","part", and "joint" initialization parameters. Default values were provided in a file `config.ini`:

\verbatim
robot icub
part head
joint 0
\endverbatim

We saved this file into a subdirectory of our source tree; we chose the "randomMotion" subdirectory, in our `<YARP_SOURCE_CODE>/examples/resourceFinder` directory.

We defined a default initialization context, i.e., "randomMotion", for the module to locate files; this means that in the source code, the ResourceFinder was configured like this:

~~~{.cpp}
ResourceFinder rf;
rf.setDefaultConfigFile("config.ini");
rf.setDefaultContext("randomMotion");
rf.configure(argc, argv);
~~~

We'll see now how to setup installation rules so that after compilation the configuration files for the module will be available without manual copies.

\section rf_install_cmake CMake to the rescue

The minimal CMake file that allows to build our tutorial modules is this (this CMake file actually builds the two Resource Finder tutorials):

~~~{.cmake}
cmake_minimum_required(VERSION 3.16)
project(resourceFinder)

find_package(YARP REQUIRED COMPONENTS os)

add_executable(rf_basic)
target_sources(rf_basic PRIVATE tutorial_rf_basic.cpp)
target_link_libraries(rf_basic PRIVATE YARP::YARP_os YARP::YARP_init)

add_executable(rf_advanced)
target_sources(rf_advanced PRIVATE tutorial_rf_advanced.cpp)
target_link_libraries(rf_advanced PRIVATE YARP::YARP_os YARP::YARP_init)
~~~

The \c yarp_install macro is loaded automatically with \c find_package(YARP):

Now, we add:

~~~{.cmake}
set(conf randomMotion/config.ini)
~~~

to tell CMake which files to install, and

~~~{.cmake}
yarp_install(FILES ${conf} DESTINATION ${YARP_CONTEXTS_INSTALL_DIR}/randomMotion)
~~~

to tell CMake where to install those files.


\section rf_install_finalnotes Notes

Keep in mind that the `${YARP_CONTEXTS_INSTALL_DIR}` variable expands to a relative path that will be appended to the installation prefix chosen by the user; the user should be warned to use the same installation directory as YARP, or to configure their system as explained \ref datafiles_3rdparty here.

Remember that you can always inspect the state of contexts on your machine, and customize installed configuration files, using the \ref yarp-config utility.


\section rf_code Code

See code in: `example/resourceFinder/CMakeLists.txt`

*/
