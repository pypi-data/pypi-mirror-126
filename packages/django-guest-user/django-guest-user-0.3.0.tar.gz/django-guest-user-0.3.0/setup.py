# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['guest_user',
 'guest_user.contrib.allauth',
 'guest_user.management',
 'guest_user.management.commands',
 'guest_user.migrations',
 'guest_user.templatetags']

package_data = \
{'': ['*'], 'guest_user': ['templates/guest_user/*']}

setup_kwargs = {
    'name': 'django-guest-user',
    'version': '0.3.0',
    'description': 'A Django app that lets visitors interact with your site without registration.',
    'long_description': '[![Code Lint](https://github.com/julianwachholz/django-guest-user/actions/workflows/lint.yml/badge.svg)](https://github.com/julianwachholz/django-guest-user/actions/workflows/lint.yml)\n[![Python Tests](https://github.com/julianwachholz/django-guest-user/actions/workflows/test.yml/badge.svg)](https://github.com/julianwachholz/django-guest-user/actions/workflows/test.yml)\n\n# django-guest-user\n\nA Django app that allows visitors to interact with your site as a guest user\nwithout requiring registration.\n\nLargely inspired by [django-lazysignup](https://github.com/danfairs/django-lazysignup) and rewritten for Django 3.1+ and Python 3.7+.\n\n## Requirements\n\nThe tests cover the following versions:\n\n- Python 3.7, 3.8, 3.9\n- Django 3.1, 3.2 and `main` (4.0)\n\n## Installation\n\nInstall the package with your favorite package manager from PyPI:\n\n```\npip install django-guest-user\n```\n\nAdd the app to your `INSTALLED_APPS` and `AUTHENTICATION_BACKENDS`:\n\n```python\nINSTALLED_APPS = [\n    # ...\n    "guest_user",\n]\n\nAUTHENTICATION_BACKENDS = [\n    "django.contrib.auth.backends.ModelBackend",\n    "guest_user.backends.GuestBackend",\n]\n```\n\nAdd the patterns to your URL config:\n\n```python\nurlpatterns = [\n    # ...\n    path("convert/", include("guest_user.urls")),\n]\n```\n\nDon\'t forget to run migrations:\n\n```\npython manage.py migrate\n```\n\n## How to use\n\nGuest users are **not** created for every unauthenticated request. Instead, use the\n[`@allow_guest_user`](#allow_guest_user) decorator on a view to enable that view to\nbe accessed by a temporary guest user.\n\nEach time an anonymous user requests a decorated view, a new temporary guest user\nwill be created and logged in with a randomly generated username.\n\nAt any point in time, the guest user may choose to permanently register with\nthe website by using the conversion view. This will delete the associated\n`Guest` instance for the user and prevent deletion from cleanup jobs.\n\n**Note**: Your Django project should be set up in such a way, that deleting a\n`User` will not be prevented by `PROTECT` or `RESTRICT` on_delete clauses.\nInstead, it\'s recommended that every foreign key to a User either use [CASCADE or SET_NULL](https://docs.djangoproject.com/en/3.2/ref/models/fields/#django.db.models.ForeignKey.on_delete).\n\n## Additional Features\n\n### django-allauth integration\n\nA small submodule is provided that will allow converting guest users by connecting\na social account with [django-allauth](https://www.intenct.nl/projects/django-allauth/).\n\nSee documentation details for it in [`guest_user.contrib.allauth`](./guest_user/contrib/allauth/).\n\n## API\n\n### Decorators\n\nModule: `guest_user.decorators`\n\n#### `@allow_guest_user`\n\nView decorator that will create a temporary guest user in the event that the\ndecorated view is accessed by an unauthenticated visitor.\n\n```python\nfrom guest_user.decorators import allow_guest_user\n\n@allow_guest_user\ndef my_view(request):\n    # Will always be either a registered a guest user.\n    username = request.user.username\n    return HttpResponse(f"Hello, {username}!")\n```\n\nTakes no arguments.\n\n#### `@guest_user_required`\n\nView decorator that only allows guest users. Anonymous or registered users will\nbe redirected to their respective redirect targets.\n\n```python\n@guest_user_required(anonymous_url="/login/", registered_url="/dashboard/")\ndef only_for_guests(request):\n    pass\n```\n\nArguments:\n\n- **anonymous_url**: Redirect target for anonymous users.\n  Defaults to the `GUEST_USER_REQUIRED_ANON_URL` setting.\n- **registered_url**: Redirect target for registered users.\n  Defaults to the `GUEST_USER_REQUIRED_USER_URL` setting.\n\n#### `@regular_user_required`\n\nIf some parts of the application should not be used by guests, you can use\nthis decorator to disable guest access.\n\nIn the event that a guest user tries to access a view decorated with it,\nthey will be redirected to the conversion page.\n\n```python\n@regular_user_required(login_url="/login/", convert_url="/convert/")\ndef only_for_real_users(request):\n    pass\n```\n\nArguments:\n\n- **login_url**: Redirect target for anonymous users.\n  Defaults to the `GUEST_USER_REQUIRED_ANON_URL` setting.\n- **convert_url**: Redirect target for **guest** users.\n  Defaults to the `GUEST_USER_REQUIRED_USER_URL` setting.\n- **redirect_field_name**: URL parameter used to redirect to the origin page.\n  Defaults to `django.contrib.auth.REDIRECT_FIELD_NAME` (which is `"next"`).\n\n### Functions\n\nModule: `guest_user.functions`\n\n#### `is_guest_user(user)`\n\nCheck wether the given user instance is a temporary guest.\n\nReturns `bool`.\n\n### Signals\n\nModule: `guest_user.signals`\n\n#### `guest_created(request, user)`\n\nSignal dispatched when a visitor accessed a view that created a guest user.\n\nProvides `user` and `request` arguments.\n\n#### `converted(user)`\n\nSignal dispatched when a guest user is converted to a regular user.\n\nProvides `user` argument.\n\n### Template Tags\n\n#### `is_guest_user`\n\nA filter to use in templates to check if the user object is a guest.\n\n```\n{% load guest_user %}\n\n{% if user|is_guest_user %}\n  Hello guest.\n{% endif %}\n```\n\n## Settings\n\nVarious settings are provided to allow customization of the guest user behavior.\n\n### `GUEST_USER_ENABLED`\n\n**bool** - If False, the `@allow_guest_user` decorator will not create guest users.\nDefaults to `True`.\n\n### `GUEST_USER_MODEL`\n\n**str**. The swappable model identifier to use as the guest model.\nDefaults to `guest_user.Guest`.\n\n### `GUEST_USER_NAME_GENERATOR`\n\n**str**. Import path to a function that will generate a username for a guest user.\nDefaults to `guest_user.functions.generate_uuid_username`.\n\nIncluded with the package are two alternatives:\n\n- `guest_user.functions.generate_numbered_username`\n\n  Will create a random four digit\n  number prefixed by `GUEST_USER_NAME_PREFIX`.\n\n- `guest_user.functions.generate_friendly_username`\n\n  Creates a friendly and easy to remember username by combining an\n  adjective, noun and number. Requires the package [`random_username`](https://pypi.org/project/random-username/).\n\n### `GUEST_USER_NAME_PREFIX`\n\n**str**. A prefix to use with the `generate_numbered_username` generator.\n\nDefaults to `Guest`.\n\n### `GUEST_USER_MAX_AGE`\n\n**int**. Seconds to keep a guest user before expiring.\n\nDefaults to `settings.SESSION_COOKIE_AGE`.\n\n### `GUEST_USER_CONVERT_FORM`\n\n**str**. Import path for the guest conversion form.\nMust implement `get_credentials` to be passed to Django\'s authenticate function.\n\nDefaults to `guest_user.forms.UserCreationForm`.\n\n### `GUEST_USER_CONVERT_PREFILL_USERNAME`\n\n**bool**. Set the generated username as initial value on the conversion form.\n\nDefaults to `False`.\n\n### `GUEST_USER_CONVERT_URL`\n\n**str**. URL name for the convert view.\n\nDefaults to `guest_user_convert`.\n\n### `GUEST_USER_CONVERT_REDIRECT_URL`\n\n**str**. URL name to redirect to after conversion, unless a redirect parameter was provided.\n\nDefaults to `guest_user_convert_success`.\n\n### `GUEST_USER_REQUIRED_ANON_URL`\n\n**str**. URL name to redirect to when an anonymous visitor tries to access a view\nwith the `@guest_user_required` decorator.\n\nDefaults to `settings.LOGIN_URL`.\n\n### `GUEST_USER_REQUIRED_USER_URL`\n\n**str**. URL name to redirect to when a registered user tries to access a view\nwith the `@guest_user_required` decorator.\n\nDefaults to `settings.LOGIN_REDIRECT_URL`.\n\n### `GUEST_USER_BLOCKED_USER_AGENTS`\n\n**list[str]**. Web crawler and other user agents to block from becoming guest users.\nThe list will be combined into a regular expression.\n\nDefault includes [a number of well known bots and spiders](https://github.com/julianwachholz/django-guest-user/blob/main/guest_user/settings.py#L122-L133).\n\n## Status\n\nThis project is still under development. But thanks to [previous work](https://github.com/danfairs/django-lazysignup) it is largely functional.\n\nI decided to rewrite the project since the original project hasn\'t seen any\nlarger updates for a few years now. The initial code base was written a long\ntime ago as well.\n',
    'author': 'Julian Wachholz',
    'author_email': 'julian@wachholz.ch',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/julianwachholz/django-guest-user',
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
