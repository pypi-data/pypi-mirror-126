# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['questgen', 'questgen.quests', 'questgen.tests']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'questgen',
    'version': '0.4.2',
    'description': 'Generator of nonlenear quests with events and flow validating.',
    'long_description': "########\nQuestgen\n########\n\nБиблиотека для автоматической генерации заданий (квестов). Позволяет по описанию мира (в виде набора предикатов) автоматически создавать вложенные нелинейные задания с событиями и разного рода ограничениями (вроде «исход задания для этого персонажа должен быть только положительным»).\n\nТакже позволяет визуализировать то, что получилось, пример визуализации: svg_\n\n.. _svg: http://tiendil.org/static/trash/collect_debt.svg\n\nКонструкторы всех заданий: ``./questgen/quests/``\n\nСоздавалась для использования в MMOZPG игре Сказка_.\n\n.. _Сказка: http://the-tale.org\n\nВизуализации всех «базовых» шаблонов заданий лежат в каталоге ``./questgen/svgs/``\n\nРабота библиотеки описана в статье на habrahabr_.\n\n.. _habrahabr: http://habrahabr.ru/post/201680/\n\n************************************\nУсловные обозначения в визуализаторе\n************************************\n\nОтображается граф квеста без модификаций (например, со всеми вариантами события, см. далее).\n\n* серые узлы — начало и окончание задания;\n* фиолетовые узлы — точки выбора;\n* зелёные узлы — обычные точки сюжета;\n* красные узлы — условные переходы;\n* бирюзовые контуры — подквесты;\n* более тёмным фоном на в узлах отмечены требования к ситуации, которые должны быть выполнены для возможности перехода в эту точку сюжета;\n* более светлым фоном выделены действия, которые должны быть выполнены сразу после перехода в точку сюжета.\n* жёлтые контуры — события;\n\n\n*********\nУстановка\n*********\n\n::\n\n   pip install git+git://github.com/Tiendil/questgen.git#egg=Questgen\n\n**************\nПринцип работы\n**************\n\nСостояния мира описывается в виде предикатов вроде\n\n.. code:: python\n\n   LocatedIn(object='hero', place='place_1')\n\n\nи сохраняются в базу знаний (БЗ)\n\nЗадание описывается ориентированным связанным графом с одной начальной вершиной и несколькими конечными (который тоже хранится в БЗ).\n\n* каждая вершина имеет список требований, которые должны быть удовлетворены, прежде чем можно будет перейти в неё (например, герой должен находиться в конкретном месте);\n* каждая вершина имеет список действий, которые должны быть выполнены, когда мы в неё перешли;\n* каждая дуга имеет два списка действий:\n  * которые должны быть выполнены, когда мы начинаем двигаться по дуге;\n  * когда мы заканчиваем двигаться по дуге (т.е. переходим в новую вершину после удовлетворения всех её требований);\n* существует несколько типов вершин:\n  * Начальная — одна на задание, с неё начинается «путешествие»;\n  * Конечная — несколько на задание, определяет результат выполнения (для стыковки с другими заданиями);\n  * обычная — узел истории, можешь иметь несколько входящих дуг и ровно одну исходящую;\n  * выбор — может иметь несколько исходящих дуг, между которыми можно переключаться, пока не пришли в одну из следующих вершин;\n\nНесколько вершин могут быть объединены в «событие», которое раскрывается при завершении генерации графа, удаляя все вершины кроме одной. Таким образом можно делать случайные события.\n\nОбщий порядок генерации:\n\n#. создать описание мира;\n#. создать задание;\n#. обработать задание (см. пример использования далее);\n#. проверить на корректность;\n#. работать с квестом в коде игры (игра реализует код, который выполняется при проходе по графу).\n\n**Следует помнить, что генерация задания может быть неудачной (вызывается исключение questgen.exceptions.RollBackError). Это не значит, что всё плохо, это значит, что необходимо повторить генерацию, т.к. был сформирован неудачный граф задания.** Из этого следует, что для лучшей и более быстрой генерации заданий лучше иметь мир побольше, чтобы не было много коллизий.\n\n******\nПример\n******\n\nсм. ``./helpers/example.py``\n\n************\nВизуализация\n************\n\nВизуализатор: ``./helpers/visualizer.py``  создаёт изображения шаблонов заданий в ``./questgen/svgs/``\n\nИспользует ``graphviz`` через библиотеку ``pygraph``\n\n*Если создаются неверные (поехавшие) изображения, поставьте новую версию graphviz*\n",
    'author': 'Aliaksei Yaletski (Tiendil)',
    'author_email': 'a.eletsky@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/Tiendil/questgen',
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
