#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @PypiSeedTag: Main
# @Project : prize


"""
generated by PypiSeed(PPC) - Main Program
"""
import threading
import time
from random import *
from tkinter import *

import tkinter.messagebox as mb
from prize.ui.menu_setting import *

BG_COLOR = 'skyblue'

sample_label = "小白%s"
all_people = []
for i in range(10):
    all_people.append(sample_label % i)
PRIZE_META = {"values": all_people, "items": []}


def figure_table(size):
    col = 5
    row = size / 5
    if size % 5 != 0 and size != 0:
        row += 1
    return row, col


def render_labels_on_panel(paned_win: PanedWindow, root: Tk):
    all_items = PRIZE_META['items']
    all_items.clear()
    children = paned_win.children
    #print("existing children:", len(children))
    for item in children:
        paned_win.remove(item)
    children = paned_win.children
    #print("cleaned children:", len(children))
    children.clear()
    #print("cleaned children:", len(children))
    paned_win = PanedWindow(orient=VERTICAL, height=50, background=BG_COLOR)
    paned_win.grid(row=4, column=0, sticky=NSEW, columnspan=2)
    people = PRIZE_META['values']
    num = len(people)
    row, col = figure_table(num)
    #print("num:", num)
    #print("row %s , col %s" % (row, col))
    row_id = 0
    col_id = 0
    counter = 0
    relief = "sunken"
    relief = "raised"
    for p in people:
        counter += 1
        item = Label(paned_win, background="skyblue", borderwidth=3, \
                     relief=relief, width=11, text=p, padx=8, pady=2)
        all_items.append(item)
        paned_win.add(item)
        item.grid(row=row_id, column=col_id, sticky=NSEW)
        col_id += 1
        if counter % 5 == 0:
            row_id += 1
            col_id = 0
    root.update()


def focus_item(rand: int, total: int, button: Button):
    all_items = PRIZE_META['items']

    def flash_red():
        print("start flashing")
        data_list = [x for x in range(total)]
        shuffle(data_list)
        # for item in all_items:
        #     item.configure(background='red')
        #     time.sleep(0.1)
        #     item.configure(background='skyblue')
        for x in data_list:
            item = all_items[x]
            item.configure(background='red')
            time.sleep(0.1)
            item.configure(background='skyblue')

    def handle_item(item: Label):
        try:
            print("winner is:", item.cget('text'))
            mb.showinfo(POPUP_TITLE, "恭喜幸运个体【" + item.cget('text') + "】！")
        except Exception as err:
            print("弹出信息失败，错误为：%s" % str(err))
        item.focus()
        item.configure(background='red')
        item.update()

    try:
        each = all_items[rand]
        # print("each : ", each)
        flash_red()
        handle_item(each)
    finally:
        button.configure(state=NORMAL)
        print("end of processing")


class ChouJiang(object):
    def __init__(self, root):
        self.root = root

    def setup_root_win(self):
        self.root.title(POPUP_TITLE)
        self.root.geometry('604x600')
        self.root.configure(bg=BG_COLOR)
        # self.root.resizable(0, 0)  # 阻止Python GUI的大小调整
        # 组件标签
        self.data_label = Label(self.root, background="tomato", text="参与抽奖全部个体")
        # 处理数据按钮
        self.generate_btn = Button(self.root, text="生成卡片", fg="red", width=10,
                                   command=self.render_text_into_cards)
        self.process_btn = Button(self.root, text="重新抽奖", fg="red", width=10,
                                  command=self.start_prize_picker)
        self.log_label = Label(self.root, width=10, background="tomato", text="黏贴抽奖人员名单")
        paned_win = PanedWindow(orient=VERTICAL)
        paned_win.configure(bg=BG_COLOR)
        self.paned_win = paned_win
        render_labels_on_panel(paned_win, self.root)
        # 文本展示框
        self.log_text = Text(self.root, width=85, height=20)
        self.log_text.insert(0.0, "<这里黏贴参与活动人员>")
        # 布局
        self.log_label.grid(row=0, column=0, columnspan=2, sticky=W + E)
        self.log_text.grid(row=1, column=0, columnspan=2, sticky=W + E)
        self.generate_btn.grid(row=2, column=0, sticky=W + E)
        self.process_btn.grid(row=2, column=1, sticky=W + E)
        self.data_label.grid(row=3, column=0, sticky=NSEW, columnspan=2)
        self.paned_win.grid(row=4, column=0, sticky=NSEW, columnspan=2)

    def start_prize_picker(self):
        self.process_btn.configure(state=DISABLED)
        print("开始抽奖")
        # Column integer to match the column which was clicked in the table
        # Create list of 'id's
        all_people = PRIZE_META['values']
        people_num = len(all_people)
        print("people_num:", people_num)
        rand = choice(range(people_num))
        print("随机数：", rand)
        all_items = PRIZE_META['items']
        for item in all_items:
            item.configure(background='skyblue')
        time.sleep(0.5)

        def my_focus_item():
            return focus_item(rand, people_num, self.process_btn)

        t = threading.Thread(target=my_focus_item)
        t.start()

    def render_text_into_cards(self):
        self.generate_btn.configure(state=DISABLED)
        try:
            comment = self.log_text.get(1.0, END).strip()
            if comment is None or comment == '' or not comment or comment == "<这里黏贴参与活动人员>":
                print("请输入有效的名单")
                return
            print("comment:", comment)
            lines = comment.split("\n")
            print("number of lines:", len(lines))
            dataset = set(lines)
            print("number of unique lines:", len(dataset))
            colspacings = []
            for line in dataset:
                if ':' in line:
                    id = line[:line.index(':')]
                    colspacings.append(id)
            print("colspacings:", colspacings)
            PRIZE_META['values'] = colspacings
            render_labels_on_panel(self.paned_win, self.root)
        finally:
            self.generate_btn.configure(state=NORMAL)

    def clear_data(self):
        pass


def construct_menu(root):
    menubar = Menu(root)
    about_menu = Menu(menubar)
    setting_menu = Menu(menubar)
    about_menu.add_command(label='版权信息', command=show_copyright)
    about_menu.add_command(label='操作说明', command=show_about)
    about_menu.add_command(label='升级', command=trigger_upgrade)
    setting_menu.add_command(label='创建桌面快捷方式', command=make_shortcut)
    menubar.add_cascade(label="使用介绍", menu=about_menu)
    menubar.add_cascade(label="更多配置", menu=setting_menu)
    return menubar


def app_start():
    # init_metadata()
    root = Tk()
    menubar = construct_menu(root)
    root.config(menu=menubar)
    prize_ui = ChouJiang(root)
    prize_ui.setup_root_win()
    # 进入事件循环，保持窗口运行
    root.mainloop()


def main():
    hello = "hello prize"
    print(hello)
    return hello


if __name__ == '__main__':
    main()
    app_start()
