# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/config.ipynb (unless otherwise specified).

__all__ = ["ConfigNotFound", "Configuration"]

# Cell
import os

from dotenv import dotenv_values


class ConfigNotFound(Exception):
    pass


class Configuration:
    project_name = ""
    config = {}

    def __init__(self, project_name="leximpact-socio-fiscal-simu-etat"):
        self.project_name = project_name
        self.get_project_module_path()
        self.load_config()

    def get_project_module_path(self):
        cur_path = os.getcwd()
        root_pos = cur_path.find(self.project_name) + len(self.project_name)
        self.project_module_path = cur_path[:root_pos]
        return self.project_module_path

    def load_config(self):
        self.config = dotenv_values(self.project_module_path + "/.env")
        return self.config

    def __str__(self):
        msg = f"Config loaded from {self.project_module_path}/.env"
        for env, value in self.config.items():
            msg += f"\n{env}={value}"
        return msg

    def print_config(self, logger):
        logger.info(f"Config loaded from {self.project_module_path}/.env")
        for env, value in self.config.items():
            logger.info(f"{env}={value}")

    def get(self, param_name, fail_on_missing=True, default=None):
        if param_name in self.config:
            return self.config[param_name]
        elif fail_on_missing:
            raise ConfigNotFound(
                f"Le parametre {param_name} n'existe pas dans {self.project_module_path + '/.env'}"
            )
        else:
            return default

    def set(self, param_name, value):
        self.config[param_name] = value
